#!/usr/bin/env python3
"""
Ableton Live Project Analyzer - Enhanced Version
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç .als —Ñ–∞–π–ª—ã –∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–µ–∫—Ç–∞
Author: Ovcharov Vladimir
"""

import gzip
import xml.etree.ElementTree as ET
import json
import os
import sys
from pathlib import Path
from datetime import datetime
from collections import defaultdict
import re

class AbletonProjectAnalyzer:
    def __init__(self, project_path):
        self.project_path = Path(project_path)
        self.als_file = None
        self.root = None
        self.analysis = {
            'project_info': {},
            'tracks': [],
            'devices': [],
            'clips': [],
            'automation': [],
            'samples': [],
            'statistics': {},
            'tempo_info': {},
            'master_track': {},
            'returns': [],
            'scenes': [],
            'locators': []
        }
        
    def find_als_file(self):
        """–ù–∞–π—Ç–∏ –≥–ª–∞–≤–Ω—ã–π .als —Ñ–∞–π–ª –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
        als_files = list(self.project_path.glob("*.als"))
        if not als_files:
            print("‚ùå .als —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç–µ")
            return False
            
        # –í—ã–±—Ä–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª (–Ω–µ –∏–∑ Backup)
        main_als = None
        for als_file in als_files:
            if "Backup" not in str(als_file):
                main_als = als_file
                break
                
        if not main_als:
            main_als = als_files[0]  # –í–∑—è—Ç—å –ª—é–±–æ–π –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω
            
        self.als_file = main_als
        print(f"üìÅ –ù–∞–π–¥–µ–Ω .als —Ñ–∞–π–ª: {self.als_file.name}")
        return True
        
    def load_and_parse(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å .als —Ñ–∞–π–ª"""
        try:
            print("üîì –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ .als —Ñ–∞–π–ª–∞...")
            with gzip.open(self.als_file, 'rt', encoding='utf-8') as f:
                xml_content = f.read()
                
            print("üìã –ü–∞—Ä—Å–∏–Ω–≥ XML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
            self.root = ET.fromstring(xml_content)
            print(f"‚úÖ XML —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω, root element: {self.root.tag}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
            return False
            
    def analyze_project_info(self):
        """–ê–Ω–∞–ª–∏–∑ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ"""
        print("üìä –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ...")
        
        self.analysis['project_info'] = {
            'file_name': self.als_file.name,
            'file_size': os.path.getsize(self.als_file),
            'analysis_date': datetime.now().isoformat(),
            'ableton_version': self.get_text_value(self.root.find('.//Creator')),
            'project_name': self.project_path.name
        }
        
        # –í–µ—Ä—Å–∏—è Ableton
        revision = self.root.get('Revision')
        if revision:
            self.analysis['project_info']['revision'] = revision
            
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏
        major_version = self.get_text_value(self.root.find('.//MajorVersion'))
        minor_version = self.get_text_value(self.root.find('.//MinorVersion'))
        if major_version:
            self.analysis['project_info']['live_version'] = f"{major_version}.{minor_version}"
            
    def analyze_tempo_info(self):
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–∞ –∏ —Ç–∞–π–º-—Å–∏–≥–Ω–∞—Ç—É—Ä—ã"""
        print("üéµ –ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–∞ –∏ –º–µ—Ç—Ä–æ–Ω–æ–º–∞...")
        
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–µ–º–ø
        master_tempo = self.root.find('.//MasterTrack//Tempo//Manual')
        if master_tempo is not None:
            tempo_value = master_tempo.get('Value')
            self.analysis['tempo_info']['master_tempo'] = float(tempo_value) if tempo_value else None
            
        # –¢–∞–π–º-—Å–∏–≥–Ω–∞—Ç—É—Ä–∞
        time_signature = self.root.find('.//MasterTrack//TimeSignature//TimeSignatureNumerator')
        if time_signature is not None:
            numerator = time_signature.get('Value')
            denominator_elem = self.root.find('.//MasterTrack//TimeSignature//TimeSignatureDenominator')
            denominator = denominator_elem.get('Value') if denominator_elem is not None else '4'
            self.analysis['tempo_info']['time_signature'] = f"{numerator}/{denominator}"
            
        # –ú–µ—Ç—Ä–æ–Ω–æ–º
        metronome = self.root.find('.//MasterTrack//Metronome//IsOn')
        if metronome is not None:
            self.analysis['tempo_info']['metronome_on'] = metronome.get('Value') == 'true'
            
    def analyze_tracks(self):
        """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤"""
        print("üéõÔ∏è –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–∫–æ–≤...")
        
        try:
            # MIDI —Ç—Ä–µ–∫–∏
            midi_tracks = self.root.findall('.//MidiTrack')
            print(f"  üìä –ù–∞–π–¥–µ–Ω–æ MIDI —Ç—Ä–µ–∫–æ–≤: {len(midi_tracks)}")
            for i, track in enumerate(midi_tracks):
                try:
                    track_info = self.analyze_single_track(track, 'MIDI', i)
                    self.analysis['tracks'].append(track_info)
                except Exception as e:
                    print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ MIDI —Ç—Ä–µ–∫–∞ {i}: {e}")
                    continue
                    
            # –ê—É–¥–∏–æ —Ç—Ä–µ–∫–∏  
            audio_tracks = self.root.findall('.//AudioTrack')
            print(f"  üìä –ù–∞–π–¥–µ–Ω–æ Audio —Ç—Ä–µ–∫–æ–≤: {len(audio_tracks)}")
            for i, track in enumerate(audio_tracks):
                try:
                    track_info = self.analyze_single_track(track, 'Audio', i)
                    self.analysis['tracks'].append(track_info)
                except Exception as e:
                    print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Audio —Ç—Ä–µ–∫–∞ {i}: {e}")
                    continue
                    
            # Return —Ç—Ä–µ–∫–∏
            return_tracks = self.root.findall('.//ReturnTrack')
            print(f"  üìä –ù–∞–π–¥–µ–Ω–æ Return —Ç—Ä–µ–∫–æ–≤: {len(return_tracks)}")
            for i, track in enumerate(return_tracks):
                try:
                    track_info = self.analyze_single_track(track, 'Return', i)
                    self.analysis['returns'].append(track_info)
                except Exception as e:
                    print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Return —Ç—Ä–µ–∫–∞ {i}: {e}")
                    continue
                    
            # Master —Ç—Ä–µ–∫
            master_track = self.root.find('.//MasterTrack')
            if master_track is not None:
                try:
                    self.analysis['master_track'] = self.analyze_single_track(master_track, 'Master', 0)
                    print("  üìä Master —Ç—Ä–µ–∫ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                except Exception as e:
                    print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Master —Ç—Ä–µ–∫–∞: {e}")
                    
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç—Ä–µ–∫–æ–≤: {e}")
            raise

    def analyze_single_track(self, track_elem, track_type, index):
        """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞"""
        track_info = {
            'type': track_type,
            'index': index,
            'name': 'Unnamed Track',
            'color': None,
            'muted': False,
            'soloed': False,
            'armed': False,
            'volume': 1.0,
            'pan': 0.0,
            'devices': [],
            'clips': [],
            'automation': [],
            'sends': []
        }
        
        try:
            # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
            name_elem = track_elem.find('.//Name//EffectiveName')
            if name_elem is not None:
                track_info['name'] = name_elem.get('Value', 'Unnamed Track')
                
            # –¶–≤–µ—Ç —Ç—Ä–µ–∫–∞
            color_elem = track_elem.find('.//ColorIndex')
            if color_elem is not None:
                track_info['color'] = int(color_elem.get('Value', -1))
                
            # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–µ–∫–∞
            track_info['muted'] = self.get_bool_value(track_elem.find('.//TrackMute//IsOn'))
            track_info['soloed'] = self.get_bool_value(track_elem.find('.//Solo//IsOn'))
            track_info['armed'] = self.get_bool_value(track_elem.find('.//Arm//IsOn'))
            
            # –ì—Ä–æ–º–∫–æ—Å—Ç—å –∏ –ø–∞–Ω–æ—Ä–∞–º–∞
            volume_elem = track_elem.find('.//Volume//Manual')
            if volume_elem is not None:
                track_info['volume'] = float(volume_elem.get('Value', 1.0))
                
            pan_elem = track_elem.find('.//Pan//Manual')
            if pan_elem is not None:
                track_info['pan'] = float(pan_elem.get('Value', 0.0))
                
            # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ —Ç—Ä–µ–∫–µ
            device_chain = track_elem.find('.//DeviceChain//Devices')
            if device_chain is not None:
                for device in device_chain:
                    if 'Device' in device.tag:
                        try:
                            device_info = self.analyze_device(device)
                            if device_info:
                                track_info['devices'].append(device_info)
                        except Exception as e:
                            print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device.tag}: {e}")
                            continue
                            
            # –ö–ª–∏–ø—ã –Ω–∞ —Ç—Ä–µ–∫–µ - —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
            clip_slots = track_elem.find('.//ClipSlots')
            if clip_slots is not None:
                for slot_index, slot in enumerate(clip_slots):
                    if slot.tag == 'ClipSlot':
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–ª–∏–ø –≤ —Å–ª–æ—Ç–µ
                        clip_slot_elem = slot.find('.//ClipSlot')
                        if clip_slot_elem is not None:
                            slot = clip_slot_elem
                            
                        if track_type == 'MIDI':
                            midi_clip = slot.find('.//MidiClip')
                            if midi_clip is not None:
                                try:
                                    clip_info = self.analyze_midi_clip(midi_clip)
                                    clip_info['slot_index'] = slot_index
                                    track_info['clips'].append(clip_info)
                                except Exception as e:
                                    print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ MIDI –∫–ª–∏–ø–∞ –≤ —Å–ª–æ—Ç–µ {slot_index}: {e}")
                                    continue
                        elif track_type == 'Audio':
                            audio_clip = slot.find('.//AudioClip')
                            if audio_clip is not None:
                                try:
                                    clip_info = self.analyze_audio_clip(audio_clip)
                                    clip_info['slot_index'] = slot_index
                                    track_info['clips'].append(clip_info)
                                except Exception as e:
                                    print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Audio –∫–ª–∏–ø–∞ –≤ —Å–ª–æ—Ç–µ {slot_index}: {e}")
                                    continue
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∫–ª–∏–ø–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –≤ —Ç—Ä–µ–∫–µ
            if track_type == 'MIDI':
                direct_clips = self.find_all_recursive(track_elem, 'MidiClip')
                for clip in direct_clips:
                    if not any(c.get('name') == clip.find('.//Name').get('Value', '') for c in track_info['clips'] if clip.find('.//Name') is not None):
                        try:
                            clip_info = self.analyze_midi_clip(clip)
                            clip_info['location'] = 'direct'
                            track_info['clips'].append(clip_info)
                        except Exception as e:
                            print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä—è–º–æ–≥–æ MIDI –∫–ª–∏–ø–∞: {e}")
                            continue
            elif track_type == 'Audio':
                direct_clips = self.find_all_recursive(track_elem, 'AudioClip')
                for clip in direct_clips:
                    if not any(c.get('name') == clip.find('.//Name').get('Value', '') for c in track_info['clips'] if clip.find('.//Name') is not None):
                        try:
                            clip_info = self.analyze_audio_clip(clip)
                            clip_info['location'] = 'direct'
                            track_info['clips'].append(clip_info)
                        except Exception as e:
                            print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä—è–º–æ–≥–æ Audio –∫–ª–∏–ø–∞: {e}")
                            continue
                            
            # Sends
            sends_section = track_elem.find('.//Sends')
            if sends_section is not None:
                for i, send in enumerate(sends_section):
                    if send.tag == 'Send':
                        try:
                            send_value = self.get_float_value(send.find('.//Manual'))
                            track_info['sends'].append({
                                'index': i,
                                'value': send_value,
                                'active': self.get_bool_value(send.find('.//IsOn'))
                            })
                        except Exception as e:
                            print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Send {i}: {e}")
                            continue
                            
            # –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–∞
            automation_section = track_elem.find('.//AutomationEnvelopes')
            if automation_section is not None:
                for envelope in automation_section:
                    if envelope.tag == 'AutomationEnvelope':
                        try:
                            automation_info = self.analyze_automation_envelope(envelope, track_info['name'])
                            if automation_info:
                                track_info['automation'].append(automation_info)
                        except Exception as e:
                            print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {e}")
                            continue
                            
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –≤ analyze_single_track –¥–ª—è {track_type} —Ç—Ä–µ–∫–∞ {index}: {e}")
            
        return track_info

    def analyze_device(self, device_elem):
        """–ê–Ω–∞–ª–∏–∑ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞/–ø–ª–∞–≥–∏–Ω–∞"""
        device_info = {
            'type': device_elem.tag,
            'name': 'Unknown Device',
            'enabled': True,
            'parameters': [],
            'plugin_info': None,
            'preset_name': None,
            'device_id': None,
            'raw_parameters': {}
        }
        
        # –í–∫–ª—é—á–µ–Ω/–≤—ã–∫–ª—é—á–µ–Ω
        on_elem = device_elem.find('.//IsOn')
        if on_elem is not None:
            device_info['enabled'] = on_elem.get('Value', 'true') == 'true'
            
        # ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        device_info['device_id'] = device_elem.get('Id', 'Unknown')
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if device_elem.tag == 'PluginDevice':
            # VST/AU –ø–ª–∞–≥–∏–Ω—ã
            plugin_desc = device_elem.find('.//PluginDesc')
            if plugin_desc is not None:
                vst_info = plugin_desc.find('.//VstPluginInfo')
                au_info = plugin_desc.find('.//AuPluginInfo')
                
                if vst_info is not None:
                    # VST –ø–ª–∞–≥–∏–Ω
                    plugin_name = vst_info.find('.//PlugName')
                    if plugin_name is not None:
                        device_info['name'] = plugin_name.get('Value', 'Unknown VST')
                        
                    vendor_name = vst_info.find('.//VendorName')
                    device_info['plugin_info'] = {
                        'type': 'VST',
                        'vendor': vendor_name.get('Value', 'Unknown') if vendor_name is not None else 'Unknown',
                        'category': self.get_text_value(vst_info.find('.//Category')),
                        'version': self.get_text_value(vst_info.find('.//Version')),
                        'uid': self.get_text_value(vst_info.find('.//UniqueId'))
                    }
                elif au_info is not None:
                    # AU –ø–ª–∞–≥–∏–Ω
                    plugin_name = au_info.find('.//Name')
                    if plugin_name is not None:
                        device_info['name'] = plugin_name.get('Value', 'Unknown AU')
                        
                    manufacturer = au_info.find('.//Manufacturer')
                    device_info['plugin_info'] = {
                        'type': 'AU',
                        'manufacturer': manufacturer.get('Value', 'Unknown') if manufacturer is not None else 'Unknown',
                        'subtype': self.get_text_value(au_info.find('.//Subtype')),
                        'type_code': self.get_text_value(au_info.find('.//Type')),
                        'uid': self.get_text_value(au_info.find('.//UniqueId'))
                    }
                    
        elif device_elem.tag == 'AuPluginDevice':
            # –û—Ç–¥–µ–ª—å–Ω—ã–π —Ç–∏–ø AU —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            plugin_desc = device_elem.find('.//PluginDesc//AuPluginInfo')
            if plugin_desc is not None:
                name_elem = plugin_desc.find('.//Name')
                device_info['name'] = name_elem.get('Value', 'AU Plugin') if name_elem is not None else 'AU Plugin'
                
                manufacturer = plugin_desc.find('.//Manufacturer')
                device_info['plugin_info'] = {
                    'type': 'AU',
                    'manufacturer': manufacturer.get('Value', 'Unknown') if manufacturer is not None else 'Unknown',
                    'subtype': self.get_text_value(plugin_desc.find('.//Subtype')),
                    'type_code': self.get_text_value(plugin_desc.find('.//Type'))
                }
                
        elif device_elem.tag == 'DrumGroupDevice':
            # Drum Rack
            device_info['name'] = 'Drum Rack'
            drum_branches = device_elem.findall('.//Branches//DrumBranch')
            device_info['drum_pads'] = len(drum_branches)
            
            # –ê–Ω–∞–ª–∏–∑ pad'–æ–≤ –≤ Drum Rack
            pads_info = []
            for branch in drum_branches:
                pad_info = {
                    'receiving_note': self.get_text_value(branch.find('.//ReceivingNote')),
                    'name': self.get_text_value(branch.find('.//Name')),
                    'devices': []
                }
                
                # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ pad'–µ
                device_chain = branch.find('.//DeviceChain//Devices')
                if device_chain is not None:
                    for pad_device in device_chain:
                        if 'Device' in pad_device.tag:
                            pad_device_info = self.analyze_device(pad_device)
                            pad_info['devices'].append(pad_device_info)
                            
                pads_info.append(pad_info)
            device_info['pads'] = pads_info
            
        else:
            # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ Ableton
            user_name = device_elem.find('.//UserName')
            if user_name is not None:
                device_info['name'] = user_name.get('Value', device_elem.tag)
            else:
                display_name = device_elem.find('.//DisplayName')
                if display_name is not None:
                    device_info['name'] = display_name.get('Value', device_elem.tag)
                else:
                    # –ß–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                    builtin_names = {
                        'Compressor2': 'Compressor',
                        'Eq8': 'EQ Eight',
                        'Reverb': 'Reverb',
                        'AutoFilter': 'Auto Filter',
                        'Delay': 'Simple Delay',
                        'Operator': 'Operator',
                        'Simpler': 'Simpler',
                        'Impulse': 'Impulse'
                    }
                    device_info['name'] = builtin_names.get(device_elem.tag, device_elem.tag)
                    
        # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞
        preset_ref = device_elem.find('.//PresetRef//FileRef//Name')
        if preset_ref is not None:
            device_info['preset_name'] = preset_ref.get('Value')
            
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        self.analyze_device_parameters(device_elem, device_info)
                
        return device_info
        
    def analyze_device_parameters(self, device_elem, device_info):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        parameters_section = device_elem.find('.//Parameters')
        if parameters_section is not None:
            for param_container in parameters_section:
                try:
                    param_info = self.extract_parameter_info(param_container)
                    if param_info:
                        device_info['parameters'].append(param_info)
                        device_info['raw_parameters'][param_container.tag] = param_info
                except Exception as e:
                    print(f"        ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {param_container.tag}: {e}")
                    continue
                    
    def extract_parameter_info(self, param_elem):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ"""
        param_info = {
            'name': param_elem.tag,
            'value': None,
            'min': None,
            'max': None,
            'automated': False,
            'modulated': False
        }
        
        # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        manual_elem = param_elem.find('.//Manual')
        if manual_elem is not None:
            try:
                param_info['value'] = float(manual_elem.get('Value', 0))
                param_info['id'] = manual_elem.get('Id', param_elem.tag)
            except (ValueError, TypeError):
                param_info['value'] = manual_elem.get('Value', 'Unknown')
                
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        automation_target = param_elem.find('.//AutomationTarget')
        if automation_target is not None:
            param_info['automated'] = True
            param_info['automation_id'] = automation_target.get('Id')
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª—è—Ü–∏–∏
        modulation_target = param_elem.find('.//ModulationTarget')
        if modulation_target is not None:
            param_info['modulated'] = True
            
        # –î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π
        min_elem = param_elem.find('.//Min')
        max_elem = param_elem.find('.//Max')
        if min_elem is not None:
            try:
                param_info['min'] = float(min_elem.get('Value', 0))
            except:
                pass
        if max_elem is not None:
            try:
                param_info['max'] = float(max_elem.get('Value', 1))
            except:
                pass
                
        if param_info['value'] is not None:
            return param_info
        return None

    def analyze_midi_clip(self, clip_elem):
        """–ê–Ω–∞–ª–∏–∑ MIDI –∫–ª–∏–ø–∞"""
        clip_info = {
            'type': 'MIDI',
            'name': 'MIDI Clip',
            'start_time': 0.0,
            'end_time': 0.0,
            'loop_start': 0.0,
            'loop_end': 0.0,
            'loop_enabled': False,
            'notes_count': 0,
            'automation_count': 0,
            'velocity_range': [0, 127],
            'pitch_range': [0, 127],
            'notes_detail': [],
            'cc_automation': [],
            'time_signature': None,
            'quantization': None
        }
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–ø–∞
        name_elem = clip_elem.find('.//Name')
        if name_elem is not None:
            clip_info['name'] = name_elem.get('Value', 'MIDI Clip')
            
        # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞
        start_time = clip_elem.find('.//CurrentStart')
        if start_time is not None:
            clip_info['start_time'] = float(start_time.get('Value', 0))
            
        end_time = clip_elem.find('.//CurrentEnd')
        if end_time is not None:
            clip_info['end_time'] = float(end_time.get('Value', 0))
            
        # –ü–µ—Ç–ª—è
        loop_elem = clip_elem.find('.//Loop')
        if loop_elem is not None:
            loop_start = loop_elem.find('.//LoopStart')
            if loop_start is not None:
                clip_info['loop_start'] = float(loop_start.get('Value', 0))
                
            loop_end = loop_elem.find('.//LoopEnd')
            if loop_end is not None:
                clip_info['loop_end'] = float(loop_end.get('Value', 0))
                
            loop_on = loop_elem.find('.//LoopOn')
            if loop_on is not None:
                clip_info['loop_enabled'] = loop_on.get('Value', 'false') == 'true'
                
        # –ê–Ω–∞–ª–∏–∑ –Ω–æ—Ç
        notes_section = clip_elem.find('.//Notes')
        notes = []
        if notes_section is not None:
            for note_event in notes_section:
                if note_event.tag == 'MidiNoteEvent':
                    note_info = {
                        'time': float(note_event.get('Time', 0)),
                        'duration': float(note_event.get('Duration', 0)),
                        'pitch': int(note_event.get('Pitch', 60)),
                        'velocity': int(note_event.get('Velocity', 100)),
                        'velocity_deviation': float(note_event.get('VelocityDeviation', 0)),
                        'offset_time': float(note_event.get('OffsetTime', 0))
                    }
                    notes.append(note_info)
                    clip_info['notes_detail'].append(note_info)
        
        clip_info['notes_count'] = len(notes)
        
        if notes:
            velocities = [note['velocity'] for note in notes]
            pitches = [note['pitch'] for note in notes]
            clip_info['velocity_range'] = [min(velocities), max(velocities)]
            clip_info['pitch_range'] = [min(pitches), max(pitches)]
            
        # –ê–Ω–∞–ª–∏–∑ CC –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ –∫–ª–∏–ø–∞
        automation_section = clip_elem.find('.//AutomationEnvelopes')
        automation_count = 0
        if automation_section is not None:
            for envelope in automation_section:
                if envelope.tag == 'AutomationEnvelope':
                    automation_count += 1
                    cc_info = self.analyze_clip_automation(envelope)
                    if cc_info:
                        clip_info['cc_automation'].append(cc_info)
                        
        clip_info['automation_count'] = automation_count
        
        # –ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è
        quantization = clip_elem.find('.//NoteQuantization')
        if quantization is not None:
            clip_info['quantization'] = quantization.get('Value', 'None')
            
        return clip_info
        
    def analyze_clip_automation(self, envelope_elem):
        """–ê–Ω–∞–ª–∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ –∫–ª–∏–ø–∞"""
        automation_info = {
            'target': 'Unknown',
            'target_parameter': None,
            'points_count': 0,
            'value_range': [0.0, 1.0],
            'time_range': [0.0, 0.0],
            'points': []
        }
        
        # –¶–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        target = envelope_elem.find('.//Target')
        if target is not None:
            automation_info['target'] = target.get('Value', 'Unknown')
            
        # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–ª–∏
        target_detail = envelope_elem.find('.//TargetDetail')
        if target_detail is not None:
            automation_info['target_parameter'] = target_detail.get('Value', 'Unknown')
            
        # –¢–æ—á–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        events_section = envelope_elem.find('.//AutomationEvents')
        points = []
        if events_section is not None:
            for event in events_section:
                if event.tag == 'FloatEvent':
                    point_info = {
                        'time': float(event.get('Time', 0)),
                        'value': float(event.get('Value', 0))
                    }
                    points.append(point_info)
                    automation_info['points'].append(point_info)
                    
        automation_info['points_count'] = len(points)
        
        if points:
            values = [point['value'] for point in points]
            times = [point['time'] for point in points]
            automation_info['value_range'] = [min(values), max(values)]
            automation_info['time_range'] = [min(times), max(times)]
            
        return automation_info if automation_info['points_count'] > 0 else None

    def analyze_audio_clip(self, clip_elem):
        """–ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ –∫–ª–∏–ø–∞"""
        clip_info = {
            'type': 'Audio',
            'name': 'Audio Clip',
            'start_time': 0.0,
            'end_time': 0.0,
            'sample_ref': None,
            'warped': False,
            'reverse': False,
            'fade_in': 0.0,
            'fade_out': 0.0
        }
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–ø–∞
        name_elem = clip_elem.find('.//Name')
        if name_elem is not None:
            clip_info['name'] = name_elem.get('Value', 'Audio Clip')
            
            # –í—Ä–µ–º—è
        start_time = clip_elem.find('.//CurrentStart')
        if start_time is not None:
            clip_info['start_time'] = float(start_time.get('Value', 0))
            
        end_time = clip_elem.find('.//CurrentEnd')
        if end_time is not None:
            clip_info['end_time'] = float(end_time.get('Value', 0))
            
        # –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–µ–º–ø–ª
        sample_ref = clip_elem.find('.//SampleRef//FileRef//Name')
        if sample_ref is not None:
            clip_info['sample_ref'] = sample_ref.get('Value')
            
        # Warp –∏ reverse
        clip_info['warped'] = self.get_bool_value(clip_elem.find('.//WarpMode//IsWarped'))
        clip_info['reverse'] = self.get_bool_value(clip_elem.find('.//Reverse'))
        
        # Fade In/Out
        fade_in = clip_elem.find('.//FadeInLength')
        if fade_in is not None:
            clip_info['fade_in'] = float(fade_in.get('Value', 0))
            
        fade_out = clip_elem.find('.//FadeOutLength')
        if fade_out is not None:
            clip_info['fade_out'] = float(fade_out.get('Value', 0))
            
        return clip_info
        
    def analyze_automation_envelope(self, envelope_elem, track_name):
        """–ê–Ω–∞–ª–∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        automation_info = {
            'track_name': track_name,
            'target': 'Unknown',
            'points_count': 0,
            'value_range': [0.0, 1.0],
            'time_range': [0.0, 0.0]
        }
        
        # –¶–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        target = envelope_elem.find('.//Target')
        if target is not None:
            automation_info['target'] = target.get('Value', 'Unknown')
            
        # –¢–æ—á–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        events_section = envelope_elem.find('.//AutomationEvents')
        points = []
        if events_section is not None:
            for event in events_section:
                if event.tag == 'FloatEvent':
                    points.append(event)
                    
        automation_info['points_count'] = len(points)
        
        if points:
            values = []
            times = []
            for point in points:
                time_val = point.get('Time')
                value_val = point.get('Value')
                if time_val:
                    times.append(float(time_val))
                if value_val:
                    values.append(float(value_val))
                    
            if values:
                automation_info['value_range'] = [min(values), max(values)]
            if times:
                automation_info['time_range'] = [min(times), max(times)]
                
        return automation_info

    def analyze_scenes_and_locators(self):
        """–ê–Ω–∞–ª–∏–∑ —Å—Ü–µ–Ω –∏ –ª–æ–∫–∞—Ç–æ—Ä–æ–≤"""
        print("üé¨ –ê–Ω–∞–ª–∏–∑ —Å—Ü–µ–Ω –∏ –ª–æ–∫–∞—Ç–æ—Ä–æ–≤...")
        
        # –°—Ü–µ–Ω—ã
        scenes = self.root.findall('.//Scenes//Scene')
        for i, scene in enumerate(scenes):
            scene_info = {
                'index': i,
                'name': 'Scene',
                'tempo': None,
                'time_signature': None,
                'annotation': None
            }
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
            name_elem = scene.find('.//Name')
            if name_elem is not None:
                scene_info['name'] = name_elem.get('Value', f'Scene {i+1}')
                
            # –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è
            annotation = scene.find('.//Annotation')
            if annotation is not None:
                scene_info['annotation'] = annotation.get('Value')
                
            # –¢–µ–º–ø —Å—Ü–µ–Ω—ã
            tempo = scene.find('.//Tempo')
            if tempo is not None:
                scene_info['tempo'] = float(tempo.get('Value', 120))
                
            self.analysis['scenes'].append(scene_info)
            
        # –õ–æ–∫–∞—Ç–æ—Ä—ã
        locators = self.root.findall('.//Locators//Locator')
        for locator in locators:
            locator_info = {
                'time': 0.0,
                'name': 'Locator',
                'annotation': None
            }
            
            # –í—Ä–µ–º—è –ª–æ–∫–∞—Ç–æ—Ä–∞
            time_elem = locator.find('.//Time')
            if time_elem is not None:
                locator_info['time'] = float(time_elem.get('Value', 0))
                
            # –ù–∞–∑–≤–∞–Ω–∏–µ
            name_elem = locator.find('.//Name')
            if name_elem is not None:
                locator_info['name'] = name_elem.get('Value', 'Locator')
                
            # –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è
            annotation = locator.find('.//Annotation')
            if annotation is not None:
                locator_info['annotation'] = annotation.get('Value')
                
            self.analysis['locators'].append(locator_info)
            
    def analyze_global_automation(self):
        """–ê–Ω–∞–ª–∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        print("üéöÔ∏è –ê–Ω–∞–ª–∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏...")
        
        # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö envelope –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ
        all_automation = self.root.findall('.//AutomationEnvelopes//AutomationEnvelope')
        
        for envelope in all_automation:
            automation_info = self.analyze_automation_envelope(envelope, 'Global')
            if automation_info:
                self.analysis['automation'].append(automation_info)
                
    def analyze_samples(self):
        """–ê–Ω–∞–ª–∏–∑ —Å–µ–º–ø–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
        print("üéµ –ê–Ω–∞–ª–∏–∑ —Å–µ–º–ø–ª–æ–≤...")
        
        samples_folder = self.project_path / "Samples"
        if samples_folder.exists():
            for sample_file in samples_folder.rglob("*.wav"):
                self.analysis['samples'].append({
                    'name': sample_file.name,
                    'path': str(sample_file.relative_to(self.project_path)),
                    'size': sample_file.stat().st_size,
                    'modified': datetime.fromtimestamp(sample_file.stat().st_mtime).isoformat()
                })
                
    def calculate_statistics(self):
        """–ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        print("üìà –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        
        stats = {
            'total_tracks': len(self.analysis['tracks']),
            'midi_tracks': len([t for t in self.analysis['tracks'] if t['type'] == 'MIDI']),
            'audio_tracks': len([t for t in self.analysis['tracks'] if t['type'] == 'Audio']),
            'return_tracks': len(self.analysis['returns']),
            'total_clips': 0,
            'midi_clips': 0,
            'audio_clips': 0,
            'total_devices': 0,
            'plugin_devices': 0,
            'builtin_devices': 0,
            'automation_envelopes': 0,
            'total_notes': 0,
            'samples_count': len(self.analysis['samples'])
        }
        
        # –ü–æ–¥—Å—á–µ—Ç –∫–ª–∏–ø–æ–≤ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        all_tracks = self.analysis['tracks'] + self.analysis['returns']
        if self.analysis['master_track']:
            all_tracks.append(self.analysis['master_track'])
            
        for track in all_tracks:
            stats['total_clips'] += len(track['clips'])
            stats['total_devices'] += len(track['devices'])
            stats['automation_envelopes'] += len(track['automation'])
            
            for clip in track['clips']:
                if clip['type'] == 'MIDI':
                    stats['midi_clips'] += 1
                    stats['total_notes'] += clip.get('notes_count', 0)
                elif clip['type'] == 'Audio':
                    stats['audio_clips'] += 1
                    
            for device in track['devices']:
                if device['type'] == 'PluginDevice':
                    stats['plugin_devices'] += 1
                else:
                    stats['builtin_devices'] += 1
                    
        self.analysis['statistics'] = stats

    def generate_report(self):
        """–°–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
        report_lines = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        report_lines.extend([
            "=" * 80,
            "üéµ ABLETON LIVE PROJECT ANALYSIS REPORT",
            "=" * 80,
            f"üìÅ Project: {self.analysis['project_info']['project_name']}",
            f"üìÑ File: {self.analysis['project_info']['file_name']}",
            f"üìÖ Analysis Date: {self.analysis['project_info']['analysis_date']}",
            f"üéõÔ∏è Ableton Version: {self.analysis['project_info'].get('live_version', 'Unknown')}",
            ""
        ])
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = self.analysis['statistics']
        report_lines.extend([
            "üìä GENERAL STATISTICS",
            "-" * 40,
            f"Total Tracks: {stats['total_tracks']}",
            f"  ‚Ä¢ MIDI Tracks: {stats['midi_tracks']}",
            f"  ‚Ä¢ Audio Tracks: {stats['audio_tracks']}",
            f"  ‚Ä¢ Return Tracks: {stats['return_tracks']}",
            f"Total Clips: {stats['total_clips']}",
            f"  ‚Ä¢ MIDI Clips: {stats['midi_clips']}",
            f"  ‚Ä¢ Audio Clips: {stats['audio_clips']}",
            f"Total Devices: {stats['total_devices']}",
            f"  ‚Ä¢ Plugin Devices: {stats['plugin_devices']}",
            f"  ‚Ä¢ Built-in Devices: {stats['builtin_devices']}",
            f"Automation Envelopes: {stats['automation_envelopes']}",
            f"Total MIDI Notes: {stats['total_notes']}",
            f"Samples: {stats['samples_count']}",
            ""
        ])
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–º–ø–µ
        if self.analysis['tempo_info']:
            tempo_info = self.analysis['tempo_info']
            report_lines.extend([
                "üéµ TEMPO & TIME SIGNATURE",
                "-" * 40,
                f"Master Tempo: {tempo_info.get('master_tempo', 'Unknown')} BPM",
                f"Time Signature: {tempo_info.get('time_signature', 'Unknown')}",
                f"Metronome: {'On' if tempo_info.get('metronome_on') else 'Off'}",
                ""
            ])
            
        # –î–µ—Ç–∞–ª–∏ —Ç—Ä–µ–∫–æ–≤
        report_lines.extend([
            "üéõÔ∏è TRACKS DETAILS",
            "-" * 40
        ])
        
        for track in self.analysis['tracks']:
            status_flags = []
            if track['muted']:
                status_flags.append("MUTED")
            if track['soloed']:
                status_flags.append("SOLO")
            if track['armed']:
                status_flags.append("ARMED")
                
            status_str = f" [{', '.join(status_flags)}]" if status_flags else ""
            
            report_lines.extend([
                f"üìç {track['type']} Track: '{track['name']}'{status_str}",
                f"   Volume: {track['volume']:.2f}, Pan: {track['pan']:.2f}",
                f"   Clips: {len(track['clips'])}, Devices: {len(track['devices'])}, Automation: {len(track['automation'])}"
            ])
            
            # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ —Ç—Ä–µ–∫–µ
            if track['devices']:
                report_lines.append("   üîå Devices:")
                for device in track['devices']:
                    enabled_str = "‚úÖ" if device['enabled'] else "‚ùå"
                    
                    # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–≥–∏–Ω–µ
                    plugin_info = ""
                    if device.get('plugin_info'):
                        plugin_type = device['plugin_info'].get('type', 'Unknown')
                        vendor = device['plugin_info'].get('vendor') or device['plugin_info'].get('manufacturer', 'Unknown')
                        plugin_info = f" ({plugin_type}: {vendor})"
                    
                    # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ—Å–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
                    preset_info = ""
                    if device.get('preset_name'):
                        preset_info = f" [Preset: {device['preset_name']}]"
                    
                    report_lines.append(f"     {enabled_str} {device['name']}{plugin_info}{preset_info}")
                    
                    # –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    if device['parameters'] and len(device['parameters']) <= 10:
                        for param in device['parameters'][:5]:
                            if isinstance(param['value'], (int, float)):
                                report_lines.append(f"       ‚Ä¢ {param['name']}: {param['value']:.3f}")
                    elif len(device['parameters']) > 10:
                        report_lines.append(f"       ‚Ä¢ Parameters: {len(device['parameters'])} total")
                    
                    # Drum Rack pads
                    if device.get('pads'):
                        report_lines.append(f"       ‚Ä¢ Drum Pads: {len(device['pads'])} configured")
                        for pad in device['pads'][:3]:
                            pad_name = pad.get('name', f"Note {pad.get('receiving_note', 'Unknown')}")
                            devices_count = len(pad.get('devices', []))
                            report_lines.append(f"         - {pad_name}: {devices_count} devices")
                    
            # –ö–ª–∏–ø—ã –Ω–∞ —Ç—Ä–µ–∫–µ
            if track['clips']:
                report_lines.append("   üéµ Clips:")
                for clip in track['clips']:
                    duration = clip['end_time'] - clip['start_time']
                    if clip['type'] == 'MIDI':
                        extra_info = f", Notes: {clip['notes_count']}"
                        if clip['automation_count'] > 0:
                            extra_info += f", CC Automation: {clip['automation_count']}"
                        if clip.get('velocity_range'):
                            vel_min, vel_max = clip['velocity_range']
                            extra_info += f", Velocity: {vel_min}-{vel_max}"
                    else:
                        extra_info = f", Sample: {clip.get('sample_ref', 'Unknown')}"
                        if clip.get('warped'):
                            extra_info += " [Warped]"
                        if clip.get('reverse'):
                            extra_info += " [Reversed]"
                    
                    location_info = f" (Slot {clip.get('slot_index', '?')})" if clip.get('slot_index') is not None else ""
                    report_lines.append(f"     üìÑ {clip['name']}{location_info} (Duration: {duration:.2f}{extra_info})")
                    
                    # –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ CC –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
                    if clip.get('cc_automation'):
                        for cc in clip['cc_automation'][:3]:
                            target = cc.get('target', 'Unknown')
                            points = cc.get('points_count', 0)
                            value_range = cc.get('value_range', [0, 1])
                            report_lines.append(f"       ‚Ä¢ CC {target}: {points} points, range {value_range[0]:.2f}-{value_range[1]:.2f}")
                    
            # –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–∞
            if track['automation']:
                report_lines.append("   üéöÔ∏è Track Automation:")
                for auto in track['automation'][:5]:
                    target = auto.get('target', 'Unknown')
                    points = auto.get('points_count', 0)
                    report_lines.append(f"     ‚Ä¢ {target}: {points} automation points")
                    
            report_lines.append("")
            
        # Return —Ç—Ä–µ–∫–∏
        if self.analysis['returns']:
            report_lines.extend([
                "üîÑ RETURN TRACKS",
                "-" * 40
            ])
            for track in self.analysis['returns']:
                report_lines.extend([
                    f"üìç Return {track['index']}: '{track['name']}'",
                    f"   Volume: {track['volume']:.2f}, Devices: {len(track['devices'])}"
                ])
                for device in track['devices']:
                    enabled_str = "‚úÖ" if device['enabled'] else "‚ùå"
                    plugin_info = ""
                    if device.get('plugin_info'):
                        vendor = device['plugin_info'].get('vendor') or device['plugin_info'].get('manufacturer', '')
                        if vendor:
                            plugin_info = f" ({vendor})"
                    report_lines.append(f"     {enabled_str} {device['name']}{plugin_info}")
            report_lines.append("")
            
        # Master —Ç—Ä–µ–∫
        if self.analysis['master_track']:
            master = self.analysis['master_track']
            report_lines.extend([
                "üéöÔ∏è MASTER TRACK",
                "-" * 40,
                f"Volume: {master['volume']:.2f}",
                f"Devices: {len(master['devices'])}"
            ])
            for device in master['devices']:
                enabled_str = "‚úÖ" if device['enabled'] else "‚ùå"
                plugin_info = ""
                if device.get('plugin_info'):
                    vendor = device['plugin_info'].get('vendor') or device['plugin_info'].get('manufacturer', '')
                    if vendor:
                        plugin_info = f" ({vendor})"
                report_lines.append(f"   {enabled_str} {device['name']}{plugin_info}")
            report_lines.append("")
            
        # –°—Ü–µ–Ω—ã
        if self.analysis['scenes']:
            report_lines.extend([
                "üé¨ SCENES",
                "-" * 40
            ])
            for scene in self.analysis['scenes']:
                tempo_info = f" (Tempo: {scene['tempo']})" if scene.get('tempo') else ""
                annotation_info = f" - {scene['annotation']}" if scene.get('annotation') else ""
                report_lines.append(f"üé¨ {scene['name']}{tempo_info}{annotation_info}")
            report_lines.append("")
            
        # –õ–æ–∫–∞—Ç–æ—Ä—ã
        if self.analysis['locators']:
            report_lines.extend([
                "üìç LOCATORS",
                "-" * 40
            ])
            for locator in self.analysis['locators']:
                time_info = f" (Time: {locator['time']:.2f})"
                annotation_info = f" - {locator['annotation']}" if locator.get('annotation') else ""
                report_lines.append(f"üìç {locator['name']}{time_info}{annotation_info}")
            report_lines.append("")
            
        # –°–µ–º–ø–ª—ã
        if self.analysis['samples']:
            report_lines.extend([
                "üéµ SAMPLES",
                "-" * 40
            ])
            for sample in self.analysis['samples']:
                size_mb = sample['size'] / (1024 * 1024)
                report_lines.append(f"üìÑ {sample['name']} ({size_mb:.1f} MB)")
            report_lines.append("")
                
        return "\n".join(report_lines)

    def generate_cc_automation_report(self):
        """–°–æ–∑–¥–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ CC –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–æ–≤"""
        report_lines = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        report_lines.extend([
            "=" * 80,
            "üéõÔ∏è CC AUTOMATION ANALYSIS REPORT",
            "=" * 80,
            f"üìÅ Project: {self.analysis['project_info']['project_name']}",
            f"üìÑ File: {self.analysis['project_info']['file_name']}",
            f"üìÖ Analysis Date: {self.analysis['project_info']['analysis_date']}",
            ""
        ])
        
        # –°–≤–æ–¥–∫–∞ –ø–æ CC –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        total_cc_envelopes = 0
        total_cc_points = 0
        cc_targets = {}
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º —Ç—Ä–µ–∫–∞–º
        all_tracks = self.analysis['tracks'] + self.analysis['returns']
        if self.analysis['master_track']:
            all_tracks.append(self.analysis['master_track'])
            
        for track in all_tracks:
            for clip in track['clips']:
                if clip.get('cc_automation'):
                    for cc in clip['cc_automation']:
                        total_cc_envelopes += 1
                        total_cc_points += cc.get('points_count', 0)
                        target = cc.get('target', 'Unknown')
                        if target not in cc_targets:
                            cc_targets[target] = {'count': 0, 'total_points': 0}
                        cc_targets[target]['count'] += 1
                        cc_targets[target]['total_points'] += cc.get('points_count', 0)
                        
            for auto in track['automation']:
                total_cc_envelopes += 1
                total_cc_points += auto.get('points_count', 0)
                target = auto.get('target', 'Unknown')
                if target not in cc_targets:
                    cc_targets[target] = {'count': 0, 'total_points': 0}
                cc_targets[target]['count'] += 1
                cc_targets[target]['total_points'] += auto.get('points_count', 0)
                
        report_lines.extend([
            "üìä CC AUTOMATION SUMMARY",
            "-" * 40,
            f"Total CC Automation Envelopes: {total_cc_envelopes}",
            f"Total Automation Points: {total_cc_points}",
            f"Average Points per Envelope: {total_cc_points/max(total_cc_envelopes, 1):.1f}",
            f"Unique CC Targets: {len(cc_targets)}",
            ""
        ])
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç—Ä–µ–∫—É —Å —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–∞–º–∏
        report_lines.extend([
            "üéπ SYNTHESIZER TRACKS WITH CC AUTOMATION",
            "-" * 60
        ])
        
        for track in self.analysis['tracks']:
            if track['type'] == 'MIDI' and (track['devices'] or track['clips']):
                # –ù–∞–π—Ç–∏ —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä—ã –Ω–∞ —Ç—Ä–µ–∫–µ
                synths = [d for d in track['devices'] if d['type'] in ['PluginDevice', 'AuPluginDevice'] or 'synth' in d['name'].lower()]
                
                if synths or any(clip.get('cc_automation') for clip in track['clips']):
                    report_lines.extend([
                        f"üéπ Track: '{track['name']}'",
                        f"   Type: {track['type']}, Volume: {track['volume']:.2f}"
                    ])
                    
                    # –°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä—ã
                    if synths:
                        report_lines.append("   üîå Synthesizers:")
                        for synth in synths:
                            plugin_info = ""
                            if synth.get('plugin_info'):
                                vendor = synth['plugin_info'].get('vendor') or synth['plugin_info'].get('manufacturer', '')
                                plugin_type = synth['plugin_info'].get('type', '')
                                if vendor or plugin_type:
                                    plugin_info = f" ({plugin_type}: {vendor})" if vendor else f" ({plugin_type})"
                            
                            report_lines.append(f"     ‚Ä¢ {synth['name']}{plugin_info}")
                            
                            # –ö–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–∞
                            if synth['parameters']:
                                filter_params = [p for p in synth['parameters'] if 'filter' in p['name'].lower() or 'cutoff' in p['name'].lower()]
                                lfo_params = [p for p in synth['parameters'] if 'lfo' in p['name'].lower()]
                                env_params = [p for p in synth['parameters'] if 'env' in p['name'].lower() or 'attack' in p['name'].lower() or 'decay' in p['name'].lower()]
                                
                                if filter_params:
                                    report_lines.append("       Filter Parameters:")
                                    for param in filter_params[:3]:
                                        report_lines.append(f"         - {param['name']}: {param['value']:.3f}")
                                        
                                if lfo_params:
                                    report_lines.append("       LFO Parameters:")
                                    for param in lfo_params[:3]:
                                        report_lines.append(f"         - {param['name']}: {param['value']:.3f}")
                                        
                                if env_params:
                                    report_lines.append("       Envelope Parameters:")
                                    for param in env_params[:3]:
                                        report_lines.append(f"         - {param['name']}: {param['value']:.3f}")
                    
                    # CC –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤ –∫–ª–∏–ø–∞—Ö
                    total_clip_automation = 0
                    for clip in track['clips']:
                        if clip.get('cc_automation'):
                            if total_clip_automation == 0:
                                report_lines.append("   üéµ CC Automation in Clips:")
                            total_clip_automation += len(clip['cc_automation'])
                            
                            report_lines.append(f"     üìÑ Clip '{clip['name']}':")
                            for cc in clip['cc_automation']:
                                target = cc.get('target', 'Unknown')
                                points = cc.get('points_count', 0)
                                value_range = cc.get('value_range', [0, 1])
                                time_range = cc.get('time_range', [0, 0])
                                
                                report_lines.append(f"       ‚Ä¢ {target}: {points} points")
                                report_lines.append(f"         Range: {value_range[0]:.3f} to {value_range[1]:.3f}")
                                report_lines.append(f"         Time: {time_range[0]:.2f} to {time_range[1]:.2f}")
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ç—Ä–µ–∫–∞
                    if track['automation']:
                        report_lines.append("   üéöÔ∏è Track-level Automation:")
                        for auto in track['automation']:
                            target = auto.get('target', 'Unknown')
                            points = auto.get('points_count', 0)
                            report_lines.append(f"     ‚Ä¢ {target}: {points} automation points")
                    
                    report_lines.append("")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        if cc_targets:
            report_lines.extend([
                "üìà CC AUTOMATION DENSITY ANALYSIS",
                "-" * 50
            ])
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ—á–µ–∫
            sorted_targets = sorted(cc_targets.items(), key=lambda x: x[1]['total_points'], reverse=True)
            
            for target, data in sorted_targets[:10]:
                avg_points = data['total_points'] / data['count']
                report_lines.append(f"üéõÔ∏è {target}:")
                report_lines.append(f"   Envelopes: {data['count']}, Total Points: {data['total_points']}")
                report_lines.append(f"   Average Points per Envelope: {avg_points:.1f}")
                
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        report_lines.extend([
            "",
            "üí° RECOMMENDATIONS FOR SYNTHESIZER RESEARCH",
            "-" * 50,
            "Based on this analysis, consider focusing on:",
            ""
        ])
        
        if total_cc_envelopes > 0:
            density = total_cc_points / total_cc_envelopes
            if density > 10:
                report_lines.append("‚úÖ High CC automation density detected - excellent for latent space modeling")
            elif density > 5:
                report_lines.append("‚ö†Ô∏è Moderate CC automation density - may need additional data")
            else:
                report_lines.append("‚ùå Low CC automation density - consider projects with more parameter automation")
        
        # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if any('filter' in target.lower() for target in cc_targets.keys()):
            report_lines.append("üéõÔ∏è Filter automation detected - good for timbral evolution analysis")
        if any('lfo' in target.lower() for target in cc_targets.keys()):
            report_lines.append("üåä LFO automation detected - useful for rhythmic modulation patterns")
        if len([t for t in self.analysis['tracks'] if t['type'] == 'MIDI' and len(t['devices']) > 0]) >= 2:
            report_lines.append("üéπ Multiple synthesizer tracks - good for comparative analysis")
            
        return "\n".join(report_lines)

    def export_for_synthesizer_research(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–æ–≤"""
        print("üî¨ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–æ–≤...")
        
        research_data = {
            'project_info': self.analysis['project_info'],
            'synthesizer_tracks': [],
            'cc_automation_summary': {
                'total_envelopes': 0,
                'total_points': 0,
                'cc_controllers_used': {},
                'parameter_types': {
                    'filter': [],
                    'lfo': [],
                    'envelope': [],
                    'oscillator': [],
                    'effects': []
                }
            },
            'midi_clips_with_automation': [],
            'recommended_segments': []
        }
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–∫–æ–≤ —Å —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–∞–º–∏
        for track in self.analysis['tracks']:
            if track['type'] == 'MIDI' and track['devices']:
                synth_track = {
                    'track_name': track['name'],
                    'track_index': track['index'],
                    'volume': track['volume'],
                    'pan': track['pan'],
                    'synthesizers': [],
                    'clips': [],
                    'automation_density': 0
                }
                
                # –ù–∞–π—Ç–∏ —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä—ã
                for device in track['devices']:
                    if device['type'] in ['PluginDevice', 'AuPluginDevice'] or any(keyword in device['name'].lower() for keyword in ['synth', 'operator', 'wavetable', 'serum', 'massive', 'sylenth']):
                        synth_info = {
                            'name': device['name'],
                            'type': device['type'],
                            'enabled': device['enabled'],
                            'plugin_info': device.get('plugin_info'),
                            'preset_name': device.get('preset_name'),
                            'parameters': device['parameters'],
                            'cc_mappings': []
                        }
                        
                        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                        for param in device['parameters']:
                            param_name = param['name'].lower()
                            if any(keyword in param_name for keyword in ['filter', 'cutoff', 'resonance']):
                                research_data['cc_automation_summary']['parameter_types']['filter'].append({
                                    'track': track['name'],
                                    'device': device['name'],
                                    'parameter': param['name'],
                                    'value': param['value']
                                })
                            elif any(keyword in param_name for keyword in ['lfo', 'oscillator']):
                                research_data['cc_automation_summary']['parameter_types']['lfo'].append({
                                    'track': track['name'],
                                    'device': device['name'],
                                    'parameter': param['name'],
                                    'value': param['value']
                                })
                            elif any(keyword in param_name for keyword in ['env', 'attack', 'decay', 'sustain', 'release']):
                                research_data['cc_automation_summary']['parameter_types']['envelope'].append({
                                    'track': track['name'],
                                    'device': device['name'],
                                    'parameter': param['name'],
                                    'value': param['value']
                                })
                        
                        synth_track['synthesizers'].append(synth_info)
                
                # –ê–Ω–∞–ª–∏–∑ –∫–ª–∏–ø–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π
                for clip in track['clips']:
                    if clip.get('cc_automation') or clip['notes_count'] > 0:
                        clip_info = {
                            'name': clip['name'],
                            'start_time': clip['start_time'],
                            'end_time': clip['end_time'],
                            'duration': clip['end_time'] - clip['start_time'],
                            'notes_count': clip['notes_count'],
                            'cc_automation': clip.get('cc_automation', []),
                            'velocity_range': clip.get('velocity_range'),
                            'pitch_range': clip.get('pitch_range'),
                            'suitable_for_research': False
                        }
                        
                        # –û—Ü–µ–Ω–∏—Ç—å –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç—å –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
                        if (clip['notes_count'] >= 10 and 
                            len(clip.get('cc_automation', [])) >= 2 and
                            clip_info['duration'] >= 2.0):
                            clip_info['suitable_for_research'] = True
                            research_data['recommended_segments'].append({
                                'track': track['name'],
                                'clip': clip['name'],
                                'duration': clip_info['duration'],
                                'automation_count': len(clip.get('cc_automation', [])),
                                'notes_count': clip['notes_count'],
                                'reason': 'High note density with multiple CC automation'
                            })
                        
                        synth_track['clips'].append(clip_info)
                        
                        # –ü–æ–¥—Å—á–µ—Ç –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
                        for cc in clip.get('cc_automation', []):
                            synth_track['automation_density'] += cc.get('points_count', 0)
                            research_data['cc_automation_summary']['total_envelopes'] += 1
                            research_data['cc_automation_summary']['total_points'] += cc.get('points_count', 0)
                            
                            # –ü–æ–¥—Å—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CC –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
                            target = cc.get('target', 'Unknown')
                            if target not in research_data['cc_automation_summary']['cc_controllers_used']:
                                research_data['cc_automation_summary']['cc_controllers_used'][target] = 0
                            research_data['cc_automation_summary']['cc_controllers_used'][target] += 1
                
                if synth_track['synthesizers'] or synth_track['clips']:
                    research_data['synthesizer_tracks'].append(synth_track)
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        research_file = self.project_path / "synthesizer_research_data.json"
        with open(research_file, 'w', encoding='utf-8') as f:
            json.dump(research_data, f, indent=2, ensure_ascii=False)
        print(f"üî¨ –î–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {research_file}")
        
        # –°–æ–∑–¥–∞—Ç—å CSV –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        self.create_csv_exports(research_data)
        
        return research_file
        
    def create_csv_exports(self, research_data):
        """–°–æ–∑–¥–∞—Ç—å CSV —Ñ–∞–π–ª—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        import csv
        
        # CSV —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª–∏–ø–∞—Ö
        clips_csv = self.project_path / "clips_analysis.csv"
        with open(clips_csv, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['Track', 'Clip_Name', 'Duration', 'Notes_Count', 'CC_Automation_Count', 
                           'Velocity_Min', 'Velocity_Max', 'Pitch_Min', 'Pitch_Max', 'Suitable_For_Research'])
            
            for track in research_data['synthesizer_tracks']:
                for clip in track['clips']:
                    vel_range = clip.get('velocity_range', [0, 127])
                    pitch_range = clip.get('pitch_range', [0, 127])
                    writer.writerow([
                        track['track_name'],
                        clip['name'],
                        clip['duration'],
                        clip['notes_count'],
                        len(clip.get('cc_automation', [])),
                        vel_range[0] if vel_range else 0,
                        vel_range[1] if vel_range else 127,
                        pitch_range[0] if pitch_range else 0,
                        pitch_range[1] if pitch_range else 127,
                        clip['suitable_for_research']
                    ])
        
        # CSV —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–∞—Ö
        synths_csv = self.project_path / "synthesizers_analysis.csv"
        with open(synths_csv, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['Track', 'Synthesizer_Name', 'Plugin_Type', 'Vendor', 'Preset', 
                           'Parameters_Count', 'Enabled'])
            
            for track in research_data['synthesizer_tracks']:
                for synth in track['synthesizers']:
                    plugin_info = synth.get('plugin_info', {})
                    vendor = plugin_info.get('vendor') or plugin_info.get('manufacturer', 'Unknown')
                    writer.writerow([
                        track['track_name'],
                        synth['name'],
                        synth['type'],
                        vendor,
                        synth.get('preset_name', 'Unknown'),
                        len(synth['parameters']),
                        synth['enabled']
                    ])
        
        print(f"üìä CSV –∞–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {clips_csv.name}, {synths_csv.name}")

    def save_results(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"""
        # JSON —Ñ–∞–π–ª —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        json_file = self.project_path / "project_analysis.json"
        with open(json_file, 'w', encoding='utf-8') as f:
            json.dump(self.analysis, f, indent=2, ensure_ascii=False)
        print(f"üíæ JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {json_file}")
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        report_file = self.project_path / "project_report.txt"
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(self.generate_report())
        print(f"üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        
        # CC –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Ç—á–µ—Ç –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        cc_report_file = self.project_path / "cc_automation_report.txt"
        with open(cc_report_file, 'w', encoding='utf-8') as f:
            f.write(self.generate_cc_automation_report())
        print(f"üéõÔ∏è CC –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {cc_report_file}")
        
        return json_file, report_file

    def find_elements_by_tag_contains(self, parent, tag_substring):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —á–∞—Å—Ç–∏ –∏–º–µ–Ω–∏ —Ç–µ–≥–∞"""
        found_elements = []
        if parent is not None:
            for child in parent.iter():
                if tag_substring in child.tag:
                    found_elements.append(child)
        return found_elements
    
    def find_all_recursive(self, parent, tag_name):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ç–µ–≥–æ–º"""
        found_elements = []
        if parent is not None:
            # –ü–æ–∏—Å–∫ –≤ –ø—Ä—è–º—ã—Ö –¥–µ—Ç—è—Ö
            for child in parent:
                if child.tag == tag_name:
                    found_elements.append(child)
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –ø–æ–¥—ç–ª–µ–º–µ–Ω—Ç–∞—Ö
                found_elements.extend(self.find_all_recursive(child, tag_name))
        return found_elements
        
    def get_text_value(self, element):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        if element is not None:
            return element.get('Value')
        return None
        
    def get_bool_value(self, element):
        """–ü–æ–ª—É—á–∏—Ç—å boolean –∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        if element is not None:
            return element.get('Value', 'false').lower() == 'true'
        return False
        
    def get_float_value(self, element):
        """–ü–æ–ª—É—á–∏—Ç—å float –∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        if element is not None:
            try:
                return float(element.get('Value', 0))
            except (ValueError, TypeError):
                return 0.0
        return 0.0

    def print_summary(self):
        """Print analysis summary"""
        print("\nüìä ANALYSIS SUMMARY")
        print("-" * 30)
        
        stats = self.analysis['statistics']
        print(f"Total tracks: {stats['total_tracks']}")
        print(f"MIDI tracks: {stats['midi_tracks']}")
        print(f"Audio tracks: {stats['audio_tracks']}")
        print(f"Total clips: {stats['total_clips']}")
        print(f"Total devices: {stats['total_devices']}")
        print(f"Plugin devices: {stats['plugin_devices']}")
        print(f"Automation envelopes: {stats['automation_envelopes']}")
        print(f"Samples: {stats['samples_count']}")
        
        # –°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä—ã
        synth_count = 0
        for track in self.analysis['tracks']:
            for device in track['devices']:
                if device['type'] in ['PluginDevice', 'AuPluginDevice']:
                    synth_count += 1
        
        print(f"Synthesizer plugins: {synth_count}")
        
        # CC –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
        cc_automation_count = 0
        for track in self.analysis['tracks']:
            for clip in track['clips']:
                cc_automation_count += len(clip.get('cc_automation', []))
            cc_automation_count += len(track['automation'])
            
        print(f"CC automation envelopes: {cc_automation_count}")
        
        if cc_automation_count > 10:
            print("‚úÖ Excellent CC automation density for research!")
        elif cc_automation_count > 5:
            print("‚ö†Ô∏è Moderate CC automation density")
        else:
            print("‚ùå Low CC automation density")
        
    def run_analysis(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ Ableton –ø—Ä–æ–µ–∫—Ç–∞...")
        print(f"üìÅ –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É: {self.project_path}")
        
        # –ü–æ–∏—Å–∫ .als —Ñ–∞–π–ª–∞
        if not self.find_als_file():
            return False
            
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥
        if not self.load_and_parse():
            return False
            
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.analyze_project_info()
        self.analyze_tempo_info()
        self.analyze_tracks()
        self.analyze_scenes_and_locators()
        self.analyze_global_automation()
        self.analyze_samples()
        self.calculate_statistics()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        json_file, report_file = self.save_results()
        
        # –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–æ–≤
        research_file = self.export_for_synthesizer_research()
        
        print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ç—Ä–µ–∫–æ–≤: {self.analysis['statistics']['total_tracks']}")
        print(f"üéµ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∫–ª–∏–ø–æ–≤: {self.analysis['statistics']['total_clips']}")
        print(f"üîå –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {self.analysis['statistics']['total_devices']}")
        print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {json_file.name}, {report_file.name}")
        print(f"üî¨ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: {research_file.name}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
        self.print_summary()
        
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python ableton_analyzer.py <–ø—É—Ç—å_–∫_–ø–∞–ø–∫–µ_–ø—Ä–æ–µ–∫—Ç–∞>")
        print("–ü—Ä–∏–º–µ—Ä: python ableton_analyzer.py 'A2ML1 Project'")
        sys.exit(1)
        
    project_path = sys.argv[1]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏
    if not os.path.exists(project_path):
        print(f"‚ùå –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {project_path}")
        sys.exit(1)
        
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∏ –∑–∞–ø—É—Å–∫
        analyzer = AbletonProjectAnalyzer(project_path)
        success = analyzer.run_analysis()
        
        if success:
            print("\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞.")
        else:
            print("\n‚ùå –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏.")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()