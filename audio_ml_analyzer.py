#!/usr/bin/env python3
import gzip
import xml.etree.ElementTree as ET
import os
import json
import numpy as np
import librosa
import soundfile as sf
from pathlib import Path
import csv
from collections import defaultdict
from datetime import datetime

class AudioMLAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞—É–¥–∏–æ –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ"""
    
    def __init__(self, als_file_path):
        self.als_file = als_file_path
        self.project_dir = Path(als_file_path).parent
        self.audio_files = {}
        self.analysis_results = {}
        
    def analyze_project_for_ml(self):
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è ML"""
        print("üéµ –ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è...")
        
        # 1. –ò–∑–≤–ª–µ—á—å –ø—É—Ç–∏ –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º –∏–∑ ALS
        audio_references = self.extract_audio_file_references()
        
        # 2. –ù–∞–π—Ç–∏ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã
        for track_name, file_info in audio_references.items():
            print(f"\nüéß –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–∫–∞: {track_name}")
            
            # –ù–∞–π—Ç–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª
            audio_path = self.find_audio_file(file_info)
            
            if audio_path and os.path.exists(audio_path):
                print(f"   –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {audio_path}")
                
                # –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ
                audio_features = self.analyze_audio_file(audio_path, track_name)
                
                if audio_features:
                    self.analysis_results[track_name] = {
                        'file_path': str(audio_path),
                        'track_type': self.determine_track_type_by_audio(audio_features, track_name),
                        'audio_features': audio_features,
                        'ml_descriptors': self.extract_ml_descriptors(audio_features)
                    }
            else:
                print(f"   ‚ö†Ô∏è –ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_info}")
        
        # 3. –°–æ–∑–¥–∞—Ç—å ML-–¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ç—Ä–µ–∫–∞
        self.create_ml_descriptors()
        
        # 4. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.save_ml_analysis()
        
        return self.analysis_results
    
    def extract_audio_file_references(self):
        """–ò–∑–≤–ª–µ—á—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –∏–∑ ALS"""
        print("üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã...")
        
        try:
            with gzip.open(self.als_file, 'rt', encoding='utf-8') as f:
                xml_content = f.read()
            
            root = ET.fromstring(xml_content)
            audio_refs = {}
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫ –≤ MIDI —Ç—Ä–µ–∫–∞—Ö (–±–∞—Å–æ–≤—ã–µ —Ç—Ä–µ–∫–∏ —á–∞—Å—Ç–æ –∑–¥–µ—Å—å)
            for track in root.iter('MidiTrack'):
                track_name = self.get_track_name(track)
                print(f"   –ü—Ä–æ–≤–µ—Ä–∫–∞ MIDI —Ç—Ä–µ–∫–∞: {track_name}")
                
                # –ü–æ–∏—Å–∫ –∞—É–¥–∏–æ –∫–ª–∏–ø–æ–≤ (—Ä–µ–Ω–¥–µ—Ä—ã MIDI)
                for audio_clip in track.findall('.//AudioClip'):
                    clip_name = self.get_clip_name(audio_clip)
                    print(f"     –ù–∞–π–¥–µ–Ω –∞—É–¥–∏–æ –∫–ª–∏–ø: {clip_name}")
                    
                    file_ref = audio_clip.find('.//FileRef')
                    if file_ref is not None:
                        name_elem = file_ref.find('.//Name')
                        path_elem = file_ref.find('.//Path')
                        relative_path = file_ref.find('.//RelativePath')
                        
                        file_info = {
                            'clip_name': clip_name,
                            'track_name': track_name,
                            'name': name_elem.get('Value') if name_elem is not None else None,
                            'path': path_elem.get('Value') if path_elem is not None else None,
                            'relative_path': relative_path.get('Value') if relative_path is not None else None,
                            'is_rendered_midi': True
                        }
                        
                        print(f"       –§–∞–π–ª: {file_info['name']}")
                        audio_refs[f"{track_name}_{clip_name}"] = file_info
                
                # –¢–∞–∫–∂–µ –ø–æ–∏—Å–∫ –≤ Arrangement –∫–ª–∏–ø–∞—Ö
                arrangement_clips = track.findall('.//ArrangementClipsListWrapper//AudioClip')
                for audio_clip in arrangement_clips:
                    clip_name = self.get_clip_name(audio_clip)
                    print(f"     –ù–∞–π–¥–µ–Ω arrangement –∞—É–¥–∏–æ –∫–ª–∏–ø: {clip_name}")
                    
                    file_ref = audio_clip.find('.//FileRef')
                    if file_ref is not None:
                        name_elem = file_ref.find('.//Name')
                        
                        file_info = {
                            'clip_name': clip_name,
                            'track_name': track_name,
                            'name': name_elem.get('Value') if name_elem is not None else None,
                            'is_arrangement': True
                        }
                        
                        print(f"       Arrangement —Ñ–∞–π–ª: {file_info['name']}")
                        audio_refs[f"{track_name}_{clip_name}_arr"] = file_info
            
            # –ü–æ–∏—Å–∫ –≤ –∞—É–¥–∏–æ —Ç—Ä–µ–∫–∞—Ö
            for track in root.iter('AudioTrack'):
                track_name = self.get_track_name(track)
                print(f"   –ü—Ä–æ–≤–µ—Ä–∫–∞ Audio —Ç—Ä–µ–∫–∞: {track_name}")
                
                # –ù–∞–π—Ç–∏ –∞—É–¥–∏–æ–∫–ª–∏–ø—ã –≤ —Ç—Ä–µ–∫–µ
                for audio_clip in track.findall('.//AudioClip'):
                    clip_name = self.get_clip_name(audio_clip)
                    print(f"     –ù–∞–π–¥–µ–Ω –∞—É–¥–∏–æ –∫–ª–∏–ø: {clip_name}")
                    
                    # –ù–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
                    file_ref = audio_clip.find('.//FileRef')
                    if file_ref is not None:
                        name_elem = file_ref.find('.//Name')
                        path_elem = file_ref.find('.//Path')
                        relative_path = file_ref.find('.//RelativePath')
                        
                        file_info = {
                            'clip_name': clip_name,
                            'track_name': track_name,
                            'name': name_elem.get('Value') if name_elem is not None else None,
                            'path': path_elem.get('Value') if path_elem is not None else None,
                            'relative_path': relative_path.get('Value') if relative_path is not None else None,
                            'is_audio_track': True
                        }
                        
                        print(f"       –§–∞–π–ª: {file_info['name']}")
                        audio_refs[f"{track_name}_{clip_name}"] = file_info
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ –∞—É–¥–∏–æ —Å—Å—ã–ª–æ–∫: {len(audio_refs)}")
            for key, info in audio_refs.items():
                print(f"   {key}: {info['name']} (—Ç—Ä–µ–∫: {info['track_name']})")
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫, –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª—ã –Ω–∞–ø—Ä—è–º—É—é
            if len(audio_refs) == 0:
                print("\nüîç –°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –Ω–∞–ø—Ä—è–º—É—é...")
                direct_files = self.find_audio_files_directly()
                
                for i, file_path in enumerate(direct_files):
                    # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ç—Ä–µ–∫–∞ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                    file_name = file_path.name.lower()
                    if any(word in file_name for word in ['bass', 'osirus', '1-']):
                        track_type = 'bass'
                    elif any(word in file_name for word in ['drum', 'coral', 'kit', '2-']):
                        track_type = 'drums'
                    elif any(word in file_name for word in ['master', 'mix']):
                        track_type = 'master'
                    else:
                        track_type = f'unknown_{i}'
                    
                    audio_refs[f"direct_{track_type}"] = {
                        'clip_name': file_path.stem,
                        'track_name': track_type,
                        'name': file_path.name,
                        'path': str(file_path),
                        'is_direct_find': True
                    }
                    print(f"   –ù–∞–π–¥–µ–Ω –Ω–∞–ø—Ä—è–º—É—é: {track_type} -> {file_path.name}")
            
            return audio_refs
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ —Å—Å—ã–ª–æ–∫: {e}")
            return {}
    
    def find_audio_files_directly(self):
        """–ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
        
        audio_files = []
        search_dirs = [
            self.project_dir,
            self.project_dir / "Samples",
            self.project_dir / "Samples" / "Recorded",
            self.project_dir / "Samples" / "Imported",
            self.project_dir / f"{Path(self.als_file).stem} Project" / "Samples",
        ]
        
        for search_dir in search_dirs:
            if not search_dir.exists():
                continue
                
            print(f"     –ü–æ–∏—Å–∫ –≤: {search_dir}")
            
            for ext in ['.wav', '.aif', '.aiff', '.mp3', '.flac']:
                files = list(search_dir.glob(f"**/*{ext}"))
                audio_files.extend(files)
        
        # –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_files = list(set(audio_files))
        
        print(f"     –ù–∞–π–¥–µ–Ω–æ {len(unique_files)} –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤")
        for f in unique_files:
            print(f"       {f.name}")
        
        return unique_files

    def get_track_name(self, track):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–º—è —Ç—Ä–µ–∫–∞"""
        name_elem = track.find('.//EffectiveName')
        if name_elem is not None and name_elem.get('Value'):
            return name_elem.get('Value')
        
        name_elem = track.find('.//Name')
        if name_elem is not None and name_elem.get('Value'):
            return name_elem.get('Value')
        
        return "Unknown"
    
    def get_clip_name(self, clip):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–º—è –∫–ª–∏–ø–∞"""
        name_elem = clip.find('.//Name')
        if name_elem is not None and name_elem.get('Value'):
            return name_elem.get('Value')
        return "Unknown"
    
    def find_audio_file(self, file_info):
        """–ù–∞–π—Ç–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫–µ"""
        
        print(f"     üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –¥–ª—è: {file_info}")
        
        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏
        possible_paths = []
        
        if file_info.get('name'):
            # –ü—Ä—è–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            possible_paths.append(self.project_dir / file_info['name'])
            
        if file_info.get('path'):
            # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
            possible_paths.append(Path(file_info['path']))
            
        if file_info.get('relative_path'):
            # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
            possible_paths.append(self.project_dir / file_info['relative_path'])
        
        # –ü–æ–∏—Å–∫ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö Ableton
        search_dirs = [
            self.project_dir,
            self.project_dir / "Samples",
            self.project_dir / "Samples" / "Recorded", 
            self.project_dir / "Samples" / "Imported",
            self.project_dir / f"{Path(self.als_file).stem} Project" / "Samples",
            self.project_dir / f"{Path(self.als_file).stem} Project" / "Samples" / "Recorded",
        ]
        
        print(f"       –ü–æ–∏—Å–∫ –≤ –ø–∞–ø–∫–∞—Ö: {[str(d) for d in search_dirs if d.exists()]}")
        
        # –ï—Å–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ None, –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–π—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç—Ä–µ–∫–∞/–∫–ª–∏–ø–∞
        if file_info.get('name') is None:
            track_name = file_info.get('track_name', '')
            clip_name = file_info.get('clip_name', '')
            
            # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å –∏–º–µ–Ω–∞–º–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
            search_patterns = []
            if 'osirus' in track_name.lower() or 'bass' in track_name.lower():
                search_patterns.extend(['*bass*', '*osirus*', '*1-*'])
            if 'coral' in track_name.lower() or 'kit' in track_name.lower():
                search_patterns.extend(['*drum*', '*coral*', '*kit*', '*2-*'])
            if 'master' in track_name.lower():
                search_patterns.extend(['*master*', '*mix*', '*final*'])
            
            # –î–æ–±–∞–≤–∏—Ç—å –æ–±—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            search_patterns.extend(['*Audio*', '*Recorded*', '*Rendered*'])
            
            print(f"       –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º: {search_patterns}")
            
            for search_dir in search_dirs:
                if not search_dir.exists():
                    continue
                    
                for pattern in search_patterns:
                    # –ü–æ–∏—Å–∫ .wav —Ñ–∞–π–ª–æ–≤
                    for ext in ['.wav', '.aif', '.aiff', '.mp3', '.flac']:
                        files = list(search_dir.glob(f"**/{pattern}{ext}"))
                        files.extend(list(search_dir.glob(f"**/{pattern.upper()}{ext}")))
                        possible_paths.extend(files)
        
        # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö
        if file_info.get('name'):
            filename = file_info['name']
            for search_dir in search_dirs:
                if search_dir.exists():
                    possible_paths.extend(search_dir.glob(f"**/{filename}"))
                    # –¢–∞–∫–∂–µ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
                    name_without_ext = Path(filename).stem
                    for ext in ['.wav', '.aif', '.aiff', '.mp3', '.flac']:
                        possible_paths.extend(search_dir.glob(f"**/{name_without_ext}{ext}"))
        
        print(f"       –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(possible_paths)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
        valid_files = []
        for path in possible_paths:
            if path.exists() and path.suffix.lower() in ['.wav', '.aif', '.aiff', '.mp3', '.flac']:
                valid_files.append(path)
                print(f"         –í–∞–ª–∏–¥–Ω—ã–π: {path}")
        
        if not valid_files:
            print(f"       ‚ùå –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return None
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ —Ñ–∞–π–ª–∞
        def get_file_priority(file_path):
            name = file_path.name.lower()
            score = 0
            
            # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ñ–∞–π–ª–∞, —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤ path
            if file_info.get('path') and str(file_path) in file_info['path']:
                score += 1000
                print(f"           –ü–†–ò–û–†–ò–¢–ï–¢: –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å path: +1000")
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ –∏–º–µ–Ω–∏ —Ç—Ä–µ–∫–∞
            track_name = file_info.get('track_name', '').lower()
            if 'bass' in track_name or 'osirus' in track_name:
                if 'bass' in name or 'osirus' in name or '1-' in name:
                    score += 100
            elif 'drum' in track_name or 'coral' in track_name or 'kit' in track_name:
                if 'drum' in name or 'coral' in name or 'kit' in name or '2-' in name:
                    score += 100
            elif 'master' in track_name:
                if 'master' in name or 'mix' in name:
                    score += 100
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è 3-Audio —Ñ–∞–π–ª–æ–≤ –∏–∑ master —Ç—Ä–µ–∫–∞
                if '3-audio' in name and 'master' in track_name:
                    score += 50
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–±–æ–ª–µ–µ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã)
            if '181342' in name:  # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
                score += 200
                print(f"           –ü–†–ò–û–†–ò–¢–ï–¢: –¶–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª 181342: +200")
            elif '181421' in name:
                score += 150
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            if file_path.suffix.lower() == '.wav':
                score += 10
            elif file_path.suffix.lower() in ['.aif', '.aiff']:
                score += 8
            
            print(f"           {file_path.name}: score = {score}")
            return score
        
        # –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        best_file = max(valid_files, key=get_file_priority)
        print(f"       ‚úÖ –í—ã–±—Ä–∞–Ω: {best_file}")
        
        return best_file
    
    def analyze_audio_file(self, audio_path, track_name):
        """–ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –¥–ª—è ML"""
        try:
            print(f"   üéº –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ: {audio_path}")
            
            # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∑–∞–≥—Ä—É–∑–∫–∏
            y = None
            sr = None
            
            try:
                # –°–ø–æ—Å–æ–± 1: librosa (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π)
                y, sr = librosa.load(audio_path, sr=None)
                print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —á–µ—Ä–µ–∑ librosa")
            except Exception as e1:
                print(f"   ‚ö†Ô∏è librosa failed: {e1}")
                try:
                    # –°–ø–æ—Å–æ–± 2: soundfile
                    import soundfile as sf
                    y, sr = sf.read(str(audio_path))
                    y = y.astype(np.float32)
                    if len(y.shape) > 1:  # –°—Ç–µ—Ä–µ–æ –≤ –º–æ–Ω–æ
                        y = np.mean(y, axis=1)
                    print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —á–µ—Ä–µ–∑ soundfile")
                except Exception as e2:
                    print(f"   ‚ö†Ô∏è soundfile failed: {e2}")
                    try:
                        # –°–ø–æ—Å–æ–± 3: scipy
                        from scipy.io import wavfile
                        sr, y = wavfile.read(str(audio_path))
                        y = y.astype(np.float32)
                        if len(y.shape) > 1:  # –°—Ç–µ—Ä–µ–æ –≤ –º–æ–Ω–æ
                            y = np.mean(y, axis=1)
                        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
                        y = y / np.max(np.abs(y)) if np.max(np.abs(y)) > 0 else y
                        print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —á–µ—Ä–µ–∑ scipy")
                    except Exception as e3:
                        print(f"   ‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã –∑–∞–≥—Ä—É–∑–∫–∏ failed: {e1}, {e2}, {e3}")
                        return None
            
            if y is None or sr is None:
                print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ")
                return None
            
            print(f"   üìä –ê–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫...")
            print(f"      –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {len(y)/sr:.2f} —Å–µ–∫")
            print(f"      Sample rate: {sr} Hz")
            print(f"      Samples: {len(y)}")
            
            # –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            duration = len(y) / sr
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ–∞–π–ª—ã
            if duration < 0.1:
                print(f"   ‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {duration:.3f} —Å–µ–∫")
                return None
            
            # –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            stft = librosa.stft(y)
            magnitude = np.abs(stft)
            
            # –ò–∑–≤–ª–µ—á—å ML-–ø—Ä–∏–∑–Ω–∞–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            features = {
                'basic': self.extract_basic_features(y, sr, duration),
                'spectral': self.extract_spectral_features(y, sr, magnitude),
                'rhythm': self.extract_rhythm_features(y, sr),
                'timbral': self.extract_timbral_features(y, sr, magnitude),
                'frequency_analysis': self.analyze_frequency_content(y, sr),
                'dynamic_analysis': self.analyze_dynamics(y, sr),
            }
            
            print(f"   ‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
            return features
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ: {e}")
            import traceback
            traceback.print_exc()
            return None
    
    def extract_basic_features(self, y, sr, duration):
        """–ò–∑–≤–ª–µ—á—å –±–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"""
        try:
            return {
                'duration': duration,
                'sample_rate': int(sr),
                'n_samples': len(y),
                'rms_energy': float(np.sqrt(np.mean(y**2))),
                'zero_crossing_rate': float(np.mean(librosa.feature.zero_crossing_rate(y))),
            }
        except Exception as e:
            print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
            return {'duration': duration, 'sample_rate': int(sr), 'n_samples': len(y)}
    
    def extract_spectral_features(self, y, sr, magnitude):
        """–ò–∑–≤–ª–µ—á—å —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"""
        try:
            return {
                'spectral_centroid': librosa.feature.spectral_centroid(y=y, sr=sr)[0],
                'spectral_rolloff': librosa.feature.spectral_rolloff(y=y, sr=sr)[0],
                'spectral_bandwidth': librosa.feature.spectral_bandwidth(y=y, sr=sr)[0],
                'spectral_contrast': librosa.feature.spectral_contrast(y=y, sr=sr),
            }
        except Exception as e:
            print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
            return {}
    
    def extract_rhythm_features(self, y, sr):
        """–ò–∑–≤–ª–µ—á—å —Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"""
        try:
            if len(y) < sr:  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ–∞–π–ª
                return {'tempo': 120.0, 'beat_track': np.array([])}
            
            tempo = librosa.beat.tempo(y=y, sr=sr)[0]
            beat_track = librosa.beat.beat_track(y=y, sr=sr)[1]
            
            return {
                'tempo': float(tempo),
                'beat_track': beat_track,
            }
        except Exception as e:
            print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∏—Ç–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
            return {'tempo': 120.0, 'beat_track': np.array([])}
    
    def extract_timbral_features(self, y, sr, magnitude):
        """–ò–∑–≤–ª–µ—á—å —Ç–µ–º–±—Ä–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"""
        try:
            return {
                'mfcc': librosa.feature.mfcc(y=y, sr=sr, n_mfcc=13),
                'chroma': librosa.feature.chroma_stft(S=magnitude, sr=sr),
                'tonnetz': librosa.feature.tonnetz(y=y, sr=sr),
            }
        except Exception as e:
            print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç–µ–º–±—Ä–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
            return {}

    def analyze_frequency_content(self, y, sr):
        """–ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ç—Ä–µ–∫–∞"""
        
        # FFT –¥–ª—è —á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        fft = np.abs(np.fft.fft(y))
        freqs = np.fft.fftfreq(len(fft), 1/sr)
        
        # Positive frequencies only
        positive_freqs = freqs[:len(freqs)//2]
        positive_fft = fft[:len(fft)//2]
        
        # Frequency bands
        sub_bass = np.sum(positive_fft[(positive_freqs >= 20) & (positive_freqs <= 60)])
        bass = np.sum(positive_fft[(positive_freqs >= 60) & (positive_freqs <= 250)])
        low_mid = np.sum(positive_fft[(positive_freqs >= 250) & (positive_freqs <= 500)])
        mid = np.sum(positive_fft[(positive_freqs >= 500) & (positive_freqs <= 2000)])
        high_mid = np.sum(positive_fft[(positive_freqs >= 2000) & (positive_freqs <= 4000)])
        high = np.sum(positive_fft[(positive_freqs >= 4000) & (positive_freqs <= 8000)])
        very_high = np.sum(positive_fft[positive_freqs >= 8000])
        
        total_energy = np.sum(positive_fft)
        
        return {
            'sub_bass_ratio': float(sub_bass / total_energy) if total_energy > 0 else 0,
            'bass_ratio': float(bass / total_energy) if total_energy > 0 else 0,
            'low_mid_ratio': float(low_mid / total_energy) if total_energy > 0 else 0,
            'mid_ratio': float(mid / total_energy) if total_energy > 0 else 0,
            'high_mid_ratio': float(high_mid / total_energy) if total_energy > 0 else 0,
            'high_ratio': float(high / total_energy) if total_energy > 0 else 0,
            'very_high_ratio': float(very_high / total_energy) if total_energy > 0 else 0,
            'fundamental_freq': float(positive_freqs[np.argmax(positive_fft)]),
            'peak_frequencies': self.find_peak_frequencies(positive_freqs, positive_fft)
        }
    
    def find_peak_frequencies(self, freqs, fft_data, n_peaks=5):
        """–ù–∞–π—Ç–∏ –ø–∏–∫–æ–≤—ã–µ —á–∞—Å—Ç–æ—Ç—ã"""
        from scipy.signal import find_peaks
        
        peaks, _ = find_peaks(fft_data, height=np.max(fft_data) * 0.1)
        peak_freqs = freqs[peaks]
        peak_magnitudes = fft_data[peaks]
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –º–∞–≥–Ω–∏—Ç—É–¥–µ
        sorted_indices = np.argsort(peak_magnitudes)[::-1]
        top_peaks = peak_freqs[sorted_indices[:n_peaks]]
        
        return [float(freq) for freq in top_peaks]
    
    def analyze_dynamics(self, y, sr):
        """–ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏ –∞—É–¥–∏–æ"""
        
        # RMS –≤ –æ–∫–Ω–∞—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–Ω–∞–º–∏–∫–∏
        hop_length = 512
        frame_length = 2048
        
        rms = librosa.feature.rms(y=y, hop_length=hop_length, frame_length=frame_length)[0]
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ dB
        rms_db = librosa.amplitude_to_db(rms)
        
        return {
            'dynamic_range_db': float(np.max(rms_db) - np.min(rms_db)),
            'avg_rms_db': float(np.mean(rms_db)),
            'rms_std': float(np.std(rms_db)),
            'peak_to_avg_ratio': float(np.max(rms) / np.mean(rms)) if np.mean(rms) > 0 else 0,
            'crest_factor': float(np.max(np.abs(y)) / np.sqrt(np.mean(y**2))) if np.mean(y**2) > 0 else 0,
        }
    
    def determine_track_type_by_audio(self, features, track_name):
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ç—Ä–µ–∫–∞ –ø–æ –∞—É–¥–∏–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º"""
        
        freq_analysis = features['frequency_analysis']
        name_lower = track_name.lower()
        
        print(f"       üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç—Ä–µ–∫–∞ –¥–ª—è: {track_name}")
        print(f"         –°—É–±-–±–∞—Å: {freq_analysis['sub_bass_ratio']:.3f}")
        print(f"         –ë–∞—Å: {freq_analysis['bass_ratio']:.3f}")
        print(f"         –°—Ä–µ–¥–Ω–∏–µ: {freq_analysis['mid_ratio']:.3f}")
        print(f"         –í—ã—Å–æ–∫–∏–µ: {freq_analysis['high_ratio']:.3f}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∏–º–µ–Ω–∏
        if any(word in name_lower for word in ['bass', 'sub', 'low', 'osirus']):
            print(f"         –¢–∏–ø –ø–æ –∏–º–µ–Ω–∏: BASS")
            return 'bass'
        elif any(word in name_lower for word in ['drum', 'kit', 'beat', 'perc', 'coral']):
            print(f"         –¢–∏–ø –ø–æ –∏–º–µ–Ω–∏: DRUMS")
            return 'drums'
        elif 'master' in name_lower:
            print(f"         –¢–∏–ø –ø–æ –∏–º–µ–Ω–∏: MASTER (–ø–æ–ª–Ω—ã–π –º–∏–∫—Å)")
            return 'master'
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —á–∞—Å—Ç–æ—Ç–Ω–æ–º—É —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é –¥–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
        if freq_analysis['sub_bass_ratio'] > 0.25 and freq_analysis['bass_ratio'] > 0.35:
            print(f"         –¢–∏–ø –ø–æ —Å–ø–µ–∫—Ç—Ä—É: BASS (–º–Ω–æ–≥–æ –Ω–∏–∑–∫–∏—Ö —á–∞—Å—Ç–æ—Ç)")
            return 'bass'
        elif freq_analysis['high_ratio'] > 0.15 and freq_analysis['very_high_ratio'] > 0.08:
            print(f"         –¢–∏–ø –ø–æ —Å–ø–µ–∫—Ç—Ä—É: DRUMS (–º–Ω–æ–≥–æ –≤—ã—Å–æ–∫–∏—Ö —á–∞—Å—Ç–æ—Ç)")
            return 'drums'
        elif (freq_analysis['sub_bass_ratio'] + freq_analysis['bass_ratio'] + 
              freq_analysis['mid_ratio'] + freq_analysis['high_ratio']) > 0.8:
            print(f"         –¢–∏–ø –ø–æ —Å–ø–µ–∫—Ç—Ä—É: MASTER (–ø–æ–ª–Ω—ã–π —Å–ø–µ–∫—Ç—Ä)")
            return 'master'
        elif freq_analysis['mid_ratio'] > 0.4:
            print(f"         –¢–∏–ø –ø–æ —Å–ø–µ–∫—Ç—Ä—É: LEAD (—Å—Ä–µ–¥–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã)")
            return 'lead'
        
        print(f"         –¢–∏–ø: UNKNOWN")
        return 'unknown'
    
    def extract_ml_descriptors(self, features):
        """–ò–∑–≤–ª–µ—á—å ML –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã –¥–ª—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞
        descriptors = {}
        
        # –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        descriptors['basic'] = features['basic']
        
        # –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–µ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
        for key, values in features['spectral'].items():
            if hasattr(values, 'shape') and len(values.shape) > 0:
                descriptors[f'{key}_mean'] = float(np.mean(values))
                descriptors[f'{key}_std'] = float(np.std(values))
                descriptors[f'{key}_median'] = float(np.median(values))
                descriptors[f'{key}_min'] = float(np.min(values))
                descriptors[f'{key}_max'] = float(np.max(values))
            else:
                descriptors[key] = float(values)
        
        # MFCC –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã (–ø–µ—Ä–≤—ã–µ 13 –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤)
        mfcc = features['timbral']['mfcc']
        for i in range(min(13, mfcc.shape[0])):
            descriptors[f'mfcc_{i}_mean'] = float(np.mean(mfcc[i]))
            descriptors[f'mfcc_{i}_std'] = float(np.std(mfcc[i]))
        
        # –•—Ä–æ–º–∞–≥—Ä–∞–º–º–∞ (12 –ø–æ–ª—É—Ç–æ–Ω–æ–≤)
        chroma = features['timbral']['chroma']
        for i in range(min(12, chroma.shape[0])):
            descriptors[f'chroma_{i}_mean'] = float(np.mean(chroma[i]))
        
        # –ß–∞—Å—Ç–æ—Ç–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        descriptors.update(features['frequency_analysis'])
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        descriptors.update(features['dynamic_analysis'])
        
        # –†–∏—Ç–º–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        descriptors['tempo'] = float(features['rhythm']['tempo'])
        
        return descriptors
    
    def create_ml_descriptors(self):
        """–°–æ–∑–¥–∞—Ç—å ML –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ç—Ä–µ–∫–∞"""
        
        print("\nü§ñ –°–æ–∑–¥–∞–Ω–∏–µ ML –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤...")
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ç–∏–ø–∞–º —Ç—Ä–µ–∫–æ–≤
        tracks_by_type = defaultdict(list)
        for track_name, track_data in self.analysis_results.items():
            track_type = track_data['track_type']
            tracks_by_type[track_type].append(track_data)
        
        # –°–æ–∑–¥–∞—Ç—å —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
        type_descriptors = {}
        
        for track_type, tracks in tracks_by_type.items():
            print(f"   üìä {track_type.upper()} —Ç—Ä–µ–∫–∏ ({len(tracks)} —à—Ç.)")
            
            if len(tracks) == 0:
                continue
            
            # –£—Å—Ä–µ–¥–Ω–∏—Ç—å –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ç–∞–ª–æ–Ω–∞ —Ç–∏–ø–∞
            all_descriptors = [track['ml_descriptors'] for track in tracks]
            
            # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏
            all_keys = set()
            for desc in all_descriptors:
                all_keys.update(desc.keys())
            
            # –£—Å—Ä–µ–¥–Ω–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
            averaged_descriptors = {}
            for key in all_keys:
                values = []
                for desc in all_descriptors:
                    if key in desc:
                        value = desc[key]
                        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ, –∞ –Ω–µ —Å–ª–æ–≤–∞—Ä—å –∏–ª–∏ —Å–ø–∏—Å–æ–∫
                        if isinstance(value, (int, float, np.integer, np.floating)):
                            values.append(float(value))
                        elif isinstance(value, bool):
                            values.append(1.0 if value else 0.0)
                
                if values:  # –ï—Å–ª–∏ –µ—Å—Ç—å —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    averaged_descriptors[key] = {
                        'mean': float(np.mean(values)),
                        'std': float(np.std(values)),
                        'min': float(np.min(values)),
                        'max': float(np.max(values)),
                        'count': len(values)
                    }
            
            type_descriptors[track_type] = averaged_descriptors
            
            # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
            if track_type == 'bass':
                self.analyze_bass_audio_characteristics(tracks)
            elif track_type == 'drums':
                self.analyze_drums_audio_characteristics(tracks)
            elif track_type == 'master':
                self.analyze_master_audio_characteristics(tracks)
        
        self.type_descriptors = type_descriptors
    
    def analyze_bass_audio_characteristics(self, bass_tracks):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–∞—Å–æ–≤—ã—Ö –∞—É–¥–∏–æ —Ç—Ä–µ–∫–æ–≤"""
        print("     üé∏ –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –±–∞—Å–∞:")
        
        for track in bass_tracks:
            features = track['audio_features']
            freq_analysis = features['frequency_analysis']
            
            print(f"       –¢—Ä–µ–∫: {track['file_path']}")
            print(f"         –°—É–±-–±–∞—Å —ç–Ω–µ—Ä–≥–∏—è: {freq_analysis['sub_bass_ratio']:.3f}")
            print(f"         –ë–∞—Å —ç–Ω–µ—Ä–≥–∏—è: {freq_analysis['bass_ratio']:.3f}")
            print(f"         –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞: {freq_analysis['fundamental_freq']:.1f} Hz")
            print(f"         –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω: {features['dynamic_analysis']['dynamic_range_db']:.1f} dB")
            
            # –ê–Ω–∞–ª–∏–∑ –¥–ª—è ML: –≤–∞–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –±–∞—Å–∞
            bass_ml_features = {
                'sub_bass_dominance': freq_analysis['sub_bass_ratio'] > 0.25,
                'bass_dominance': freq_analysis['bass_ratio'] > 0.35,
                'low_frequency_focus': freq_analysis['fundamental_freq'] < 200,
                'tight_dynamics': features['dynamic_analysis']['dynamic_range_db'] < 20
            }
            
            track['bass_specific_ml'] = bass_ml_features
    
    def analyze_drums_audio_characteristics(self, drum_tracks):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–∞—Ä–∞–±–∞–Ω–Ω—ã—Ö –∞—É–¥–∏–æ —Ç—Ä–µ–∫–æ–≤"""
        print("     ü•Å –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –±–∞—Ä–∞–±–∞–Ω–æ–≤:")
        
        for track in drum_tracks:
            features = track['audio_features']
            freq_analysis = features['frequency_analysis']
            dynamic_analysis = features['dynamic_analysis']
            
            print(f"       –¢—Ä–µ–∫: {track['file_path']}")
            print(f"         –í—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã: {freq_analysis['high_ratio']:.3f}")
            print(f"         –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–µ: {freq_analysis['very_high_ratio']:.3f}")
            print(f"         –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω: {dynamic_analysis['dynamic_range_db']:.1f} dB")
            print(f"         –ö—Ä–µ—Å—Ç-—Ñ–∞–∫—Ç–æ—Ä: {dynamic_analysis['crest_factor']:.2f}")
            
            # –ê–Ω–∞–ª–∏–∑ –¥–ª—è ML: –≤–∞–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –±–∞—Ä–∞–±–∞–Ω–æ–≤
            drums_ml_features = {
                'high_frequency_content': freq_analysis['high_ratio'] > 0.15,
                'percussive_transients': dynamic_analysis['crest_factor'] > 3.0,
                'wide_dynamics': dynamic_analysis['dynamic_range_db'] > 25,
                'peak_to_avg_high': dynamic_analysis['peak_to_avg_ratio'] > 2.0
            }
            
            track['drums_specific_ml'] = drums_ml_features
    
    def analyze_master_audio_characteristics(self, master_tracks):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ master —Ç—Ä–µ–∫–æ–≤ (–ø–æ–ª–Ω—ã–π –º–∏–∫—Å)"""
        print("     üéöÔ∏è –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –º–∞—Å—Ç–µ—Ä-—Ç—Ä–µ–∫–∞:")
        
        for track in master_tracks:
            features = track['audio_features']
            freq_analysis = features['frequency_analysis']
            dynamic_analysis = features['dynamic_analysis']
            
            print(f"       –¢—Ä–µ–∫: {track['file_path']}")
            print(f"         –ü–æ–ª–Ω—ã–π —Å–ø–µ–∫—Ç—Ä:")
            print(f"           –°—É–±-–±–∞—Å: {freq_analysis['sub_bass_ratio']:.3f}")
            print(f"           –ë–∞—Å: {freq_analysis['bass_ratio']:.3f}")
            print(f"           –°—Ä–µ–¥–Ω–∏–µ: {freq_analysis['mid_ratio']:.3f}")
            print(f"           –í—ã—Å–æ–∫–∏–µ: {freq_analysis['high_ratio']:.3f}")
            print(f"         –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞: {freq_analysis['fundamental_freq']:.1f} Hz")
            print(f"         –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω: {dynamic_analysis['dynamic_range_db']:.1f} dB")
            print(f"         RMS —ç–Ω–µ—Ä–≥–∏—è: {features['basic']['rms_energy']:.4f}")
            
            # –ê–Ω–∞–ª–∏–∑ –¥–ª—è ML: —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ–ª–Ω–æ–≥–æ –º–∏–∫—Å–∞
            master_ml_features = {
                'full_spectrum_coverage': (freq_analysis['sub_bass_ratio'] + 
                                         freq_analysis['bass_ratio'] + 
                                         freq_analysis['mid_ratio'] + 
                                         freq_analysis['high_ratio']) > 0.7,
                'balanced_mix': abs(freq_analysis['bass_ratio'] - freq_analysis['mid_ratio']) < 0.2,
                'professional_dynamics': 15 < dynamic_analysis['dynamic_range_db'] < 30,
                'good_loudness': 0.01 < features['basic']['rms_energy'] < 0.5,
                'tempo': features['rhythm']['tempo'],
                'spectral_balance': {
                    'bass_energy': freq_analysis['sub_bass_ratio'] + freq_analysis['bass_ratio'],
                    'mid_energy': freq_analysis['low_mid_ratio'] + freq_analysis['mid_ratio'],
                    'high_energy': freq_analysis['high_ratio'] + freq_analysis['very_high_ratio']
                }
            }
            
            print(f"         ML —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
            print(f"           –ü–æ–ª–Ω—ã–π —Å–ø–µ–∫—Ç—Ä: {master_ml_features['full_spectrum_coverage']}")
            print(f"           –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∏–∫—Å: {master_ml_features['balanced_mix']}")
            print(f"           –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞: {master_ml_features['professional_dynamics']}")
            print(f"           –¢–µ–º–ø: {master_ml_features['tempo']:.1f} BPM")
            
            track['master_specific_ml'] = master_ml_features
    
    def save_ml_analysis(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ML –∞–Ω–∞–ª–∏–∑–∞"""
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        output_file = self.project_dir / 'audio_ml_analysis.json'
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å numpy –≤ –æ–±—ã—á–Ω—ã–µ —Ç–∏–ø—ã)
        save_data = {
            'project_info': {
                'als_file': str(self.als_file),
                'project_dir': str(self.project_dir),
                'analysis_timestamp': datetime.now().isoformat()
            },
            'tracks': {},
            'type_descriptors': getattr(self, 'type_descriptors', {})
        }
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å numpy –º–∞—Å—Å–∏–≤—ã –≤ —Å–ø–∏—Å–∫–∏ –¥–ª—è JSON
        for track_name, track_data in self.analysis_results.items():
            save_track_data = {}
            
            for key, value in track_data.items():
                if key == 'audio_features':
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å numpy –º–∞—Å—Å–∏–≤—ã
                    converted_features = self.convert_numpy_for_json(value)
                    save_track_data[key] = converted_features
                else:
                    save_track_data[key] = value
            
            save_data['tracks'][track_name] = save_track_data
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(save_data, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ ML –∞–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
        
        # –°–æ–∑–¥–∞—Ç—å CSV —Å ML –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞–º–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        csv_file = self.project_dir / 'ml_descriptors.csv'
        
        with open(csv_file, 'w', newline='', encoding='utf-8') as f:
            if self.analysis_results:
                # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤
                all_keys = set()
                for track_data in self.analysis_results.values():
                    all_keys.update(track_data['ml_descriptors'].keys())
                
                fieldnames = ['track_name', 'track_type', 'file_path'] + sorted(all_keys)
                writer = csv.DictWriter(f, fieldnames=fieldnames)
                writer.writeheader()
                
                for track_name, track_data in self.analysis_results.items():
                    row = {
                        'track_name': track_name,
                        'track_type': track_data['track_type'],
                        'file_path': track_data['file_path']
                    }
                    row.update(track_data['ml_descriptors'])
                    writer.writerow(row)
        
        print(f"üíæ ML –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {csv_file}")
    
    def convert_numpy_for_json(self, obj):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å numpy –æ–±—ä–µ–∫—Ç—ã –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        if isinstance(obj, dict):
            return {key: self.convert_numpy_for_json(value) for key, value in obj.items()}
        elif isinstance(obj, list):
            return [self.convert_numpy_for_json(item) for item in obj]
        elif isinstance(obj, np.ndarray):
            return obj.tolist()
        elif isinstance(obj, np.integer):
            return int(obj)
        elif isinstance(obj, np.floating):
            return float(obj)
        else:
            return obj

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫
    try:
        import librosa
        import soundfile
        import scipy
    except ImportError as e:
        print(f"‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞—É–¥–∏–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:")
        print("pip install librosa soundfile scipy")
        return
    
    als_file = 'A2ML1.als'
    
    if not os.path.exists(als_file):
        print(f"‚ùå ALS —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {als_file}")
        return
    
    # –°–æ–∑–¥–∞—Ç—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = AudioMLAnalyzer(als_file)
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑
    results = analyzer.analyze_project_for_ml()
    
    if results:
        print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(results)} –∞—É–¥–∏–æ —Ç—Ä–µ–∫–æ–≤.")
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        
        for track_name, data in results.items():
            print(f"   üéµ {track_name}: {data['track_type']}")
            print(f"      –§–∞–π–ª: {data['file_path']}")
            
            if 'bass_specific_ml' in data:
                bass_ml = data['bass_specific_ml']
                print(f"      –ë–∞—Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: —Å—É–±-–±–∞—Å={bass_ml['sub_bass_dominance']}, –Ω–∏–∑–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã={bass_ml['low_frequency_focus']}")
            
            if 'drums_specific_ml' in data:
                drums_ml = data['drums_specific_ml']
                print(f"      –ë–∞—Ä–∞–±–∞–Ω —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: –≤—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã={drums_ml['high_frequency_content']}, –¥–∏–Ω–∞–º–∏–∫–∞={drums_ml['wide_dynamics']}")
    else:
        print("‚ö†Ô∏è –ê—É–¥–∏–æ —Ç—Ä–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å")

if __name__ == "__main__":
    main()