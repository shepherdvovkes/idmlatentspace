#!/usr/bin/env python3
import gzip
import xml.etree.ElementTree as ET
import csv
from collections import defaultdict
import json

def analyze_project_by_track_types():
    """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–æ–≤ —Ç—Ä–µ–∫–æ–≤ –∏ –∏—Ö —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏"""
    print("üéõÔ∏è –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–∫–æ–≤ —Å —É—á–µ—Ç–æ–º –∏—Ö —Ç–∏–ø–æ–≤ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫...")
    
    try:
        with gzip.open('A2ML1.als', 'rt', encoding='utf-8') as f:
            xml_content = f.read()
        
        root = ET.fromstring(xml_content)
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        print("\nüîç –û—Ç–ª–∞–¥–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç—Ä–µ–∫–æ–≤:")
        
        # –ù–∞–π—Ç–∏ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–∏–ø—ã —Ç—Ä–µ–∫–æ–≤
        midi_tracks = list(root.iter('MidiTrack'))
        audio_tracks = list(root.iter('AudioTrack'))
        
        print(f"–ù–∞–π–¥–µ–Ω–æ MIDI —Ç—Ä–µ–∫–æ–≤: {len(midi_tracks)}")
        print(f"–ù–∞–π–¥–µ–Ω–æ Audio —Ç—Ä–µ–∫–æ–≤: {len(audio_tracks)}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ —Ç—Ä–µ–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if midi_tracks:
            print(f"\n–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ MIDI —Ç—Ä–µ–∫–∞:")
            debug_track_structure(midi_tracks[0])
        
        # –ù–∞–π—Ç–∏ –≤—Å–µ —Ç—Ä–µ–∫–∏
        tracks_data = []
        
        # –ê–Ω–∞–ª–∏–∑ MIDI —Ç—Ä–µ–∫–æ–≤
        for i, track in enumerate(midi_tracks):
            print(f"\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ MIDI —Ç—Ä–µ–∫–∞ {i+1}/{len(midi_tracks)} ---")
            track_info = analyze_midi_track(track)
            if track_info:
                tracks_data.append(track_info)
        
        # –ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ —Ç—Ä–µ–∫–æ–≤
        for i, track in enumerate(audio_tracks):
            print(f"\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ Audio —Ç—Ä–µ–∫–∞ {i+1}/{len(audio_tracks)} ---")
            track_info = analyze_audio_track(track)
            if track_info:
                tracks_data.append(track_info)
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º —Ç—Ä–µ–∫–æ–≤
        if tracks_data:
            analyze_by_track_types(tracks_data)
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            save_track_analysis(tracks_data)
        else:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–æ–≤")
        
        return tracks_data
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return []

def debug_track_structure(track):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç—Ä–µ–∫–∞"""
    print("  –≠–ª–µ–º–µ–Ω—Ç—ã —Ç—Ä–µ–∫–∞:")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä—è–º—ã–µ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    for child in list(track)[:10]:  # –ü–µ—Ä–≤—ã–µ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        print(f"    - {child.tag}")
        if child.tag == 'Name' and child.get('Value'):
            print(f"      Value: {child.get('Value')}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        for subchild in list(child)[:3]:  # –ü–µ—Ä–≤—ã–µ 3 –ø–æ–¥—ç–ª–µ–º–µ–Ω—Ç–∞
            print(f"      - {subchild.tag}")
            if subchild.get('Value'):
                print(f"        Value: {subchild.get('Value')}")
    
    # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º Value
    print("  –≠–ª–µ–º–µ–Ω—Ç—ã —Å Value:")
    for elem in track.iter():
        if elem.get('Value') and elem.tag in ['Name', 'EffectiveName', 'UserName']:
            print(f"    {elem.tag}: {elem.get('Value')}")

def analyze_midi_track(track):
    """–ê–Ω–∞–ª–∏–∑ MIDI —Ç—Ä–µ–∫–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ç–∏–ø–∞ (–±–∞—Å, –±–∞—Ä–∞–±–∞–Ω—ã, –º–µ–ª–æ–¥–∏—è)"""
    
    # –ü–æ–ª—É—á–∏—Ç—å –∏–º—è —Ç—Ä–µ–∫–∞ - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    track_name = get_track_name(track)
    
    print(f"\nüéπ –ê–Ω–∞–ª–∏–∑ MIDI —Ç—Ä–µ–∫–∞: '{track_name}'")
    
    track_data = {
        'name': track_name,
        'type': 'MIDI',
        'track_type': determine_track_type(track_name, track),
        'clips': [],
        'devices': [],
        'automation': [],
        'sends': [],
        'volume': None,
        'pan': None
    }
    
    # –ê–Ω–∞–ª–∏–∑ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–∞ —Ç—Ä–µ–∫–µ
    devices = analyze_track_devices(track)
    track_data['devices'] = devices
    
    # –ê–Ω–∞–ª–∏–∑ –∫–ª–∏–ø–æ–≤
    clips = analyze_track_clips(track)
    track_data['clips'] = clips
    
    # –ê–Ω–∞–ª–∏–∑ –º–∏–∫—à–µ—Ä–∞
    mixer_data = analyze_track_mixer(track)
    track_data.update(mixer_data)
    
    # –ê–Ω–∞–ª–∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
    automation = analyze_track_automation(track)
    track_data['automation'] = automation
    
    return track_data

def analyze_audio_track(track):
    """–ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ —Ç—Ä–µ–∫–∞"""
    track_name = get_track_name(track)
    
    print(f"\nüîä –ê–Ω–∞–ª–∏–∑ Audio —Ç—Ä–µ–∫–∞: '{track_name}'")
    
    track_data = {
        'name': track_name,
        'type': 'Audio',
        'track_type': 'master' if 'master' in track_name.lower() else 'audio',
        'clips': [],
        'devices': [],
        'automation': [],
        'sends': [],
        'volume': None,
        'pan': None
    }
    
    # –ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ –∫–ª–∏–ø–æ–≤
    audio_clips = track.findall('.//AudioClip')
    for clip in audio_clips:
        clip_info = analyze_audio_clip(clip)
        if clip_info:
            track_data['clips'].append(clip_info)
    
    # –ê–Ω–∞–ª–∏–∑ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    devices = analyze_track_devices(track)
    track_data['devices'] = devices
    
    return track_data

def get_track_name(track):
    """–ù–∞–¥–µ–∂–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ç—Ä–µ–∫–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç"""
    
    # –í–∞—Ä–∏–∞–Ω—Ç 1: –ü—Ä—è–º–æ–µ –∏–º—è –≤ Name
    name_elem = track.find('.//Name')
    if name_elem is not None and name_elem.get('Value'):
        return name_elem.get('Value')
    
    # –í–∞—Ä–∏–∞–Ω—Ç 2: –ò–º—è –≤ EffectiveName  
    effective_name = track.find('.//EffectiveName')
    if effective_name is not None and effective_name.get('Value'):
        return effective_name.get('Value')
    
    # –í–∞—Ä–∏–∞–Ω—Ç 3: –ò–º—è –≤ UserName
    user_name = track.find('.//UserName')
    if user_name is not None and user_name.get('Value'):
        return user_name.get('Value')
    
    # –í–∞—Ä–∏–∞–Ω—Ç 4: –ü–æ–∏—Å–∫ –ø–æ LomId –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç—Ä–µ–∫–∞
    lom_id = track.find('.//LomId')
    if lom_id is not None:
        track_id = lom_id.get('Value', 'Unknown')
        return f"Track_{track_id}"
    
    return "Unnamed_Track"

def determine_track_type(track_name, track_element):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç—Ä–µ–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É"""
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏
    if track_name is None:
        track_name = "unknown"
    
    name_lower = track_name.lower()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∏–º–µ–Ω–∏ - –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    if any(word in name_lower for word in ['bass', '–±–∞—Å', 'sub', 'osirus']):
        return 'bass'
    elif any(word in name_lower for word in ['drum', 'kit', 'kick', 'snare', 'hat', 'perc', '–±–∞—Ä–∞–±–∞–Ω', 'coral']):
        return 'drums'
    elif any(word in name_lower for word in ['lead', 'melody', '–º–µ–ª–æ–¥–∏—è', '—Å–æ–ª–æ']):
        return 'lead'
    elif any(word in name_lower for word in ['pad', 'string', 'chord', '–∞–∫–∫–æ—Ä–¥']):
        return 'harmony'
    elif any(word in name_lower for word in ['fx', 'effect', '—ç—Ñ—Ñ–µ–∫—Ç']):
        return 'fx'
    elif 'master' in name_lower:
        return 'master'
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ MIDI –Ω–æ—Ç–∞–º (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª–∏–ø—ã)
    clips = track_element.findall('.//MidiClip')
    if clips:
        midi_notes = []
        clip_names = []
        
        for clip in clips:
            # –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –∫–ª–∏–ø–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            clip_name_elem = clip.find('.//Name')
            if clip_name_elem is not None:
                clip_name = clip_name_elem.get('Value', '').lower()
                clip_names.append(clip_name)
                
                # –ê–Ω–∞–ª–∏–∑ –ø–æ –∏–º–µ–Ω–∞–º –∫–ª–∏–ø–æ–≤
                if any(word in clip_name for word in ['funk', 'beat', 'straight', 'swing', 'groove']):
                    return 'drums'
                elif any(word in clip_name for word in ['bass', 'sub']):
                    return 'bass'
            
            for key_track in clip.findall('.//KeyTrack'):
                midi_key_elem = key_track.find('./MidiKey')
                if midi_key_elem is not None:
                    midi_notes.append(int(midi_key_elem.get('Value')))
        
        if midi_notes:
            avg_pitch = sum(midi_notes) / len(midi_notes)
            unique_pitches = len(set(midi_notes))
            pitch_range = max(midi_notes) - min(midi_notes)
            
            print(f"    MIDI –∞–Ω–∞–ª–∏–∑: avg_pitch={avg_pitch:.1f}, unique={unique_pitches}, range={pitch_range}")
            print(f"    –ü–∏—Ç—á–∏: {sorted(set(midi_notes))}")
            print(f"    –ò–º–µ–Ω–∞ –∫–ª–∏–ø–æ–≤: {clip_names}")
            
            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –ø–∏—Ç—á–∞–º
            # –ë–∞—Ä–∞–±–∞–Ω—ã: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π GM –¥–∏–∞–ø–∞–∑–æ–Ω 35-81, –º–Ω–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∏—Ç—á–µ–π
            if (35 <= min(midi_notes) <= 51 and 
                35 <= max(midi_notes) <= 81 and 
                unique_pitches >= 3):
                print(f"    -> –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ DRUMS (GM –¥–∏–∞–ø–∞–∑–æ–Ω + –º–Ω–æ–≥–æ –ø–∏—Ç—á–µ–π)")
                return 'drums'
            
            # –ë–∞—Å: –Ω–∏–∑–∫–∏–µ –Ω–æ—Ç—ã, –º–∞–ª–æ –≤–∞—Ä–∏–∞—Ü–∏–π
            elif avg_pitch < 50 and unique_pitches <= 3 and pitch_range <= 20:
                print(f"    -> –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ BASS (–Ω–∏–∑–∫–∏–µ –Ω–æ—Ç—ã + –º–∞–ª–æ –≤–∞—Ä–∏–∞—Ü–∏–π)")
                return 'bass'
            
            # –ú–µ–ª–æ–¥–∏—è: –≤—ã—Å–æ–∫–∏–µ –Ω–æ—Ç—ã, —Å—Ä–µ–¥–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω
            elif avg_pitch > 60 and pitch_range > 12:
                print(f"    -> –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ LEAD (–≤—ã—Å–æ–∫–∏–µ –Ω–æ—Ç—ã + —à–∏—Ä–æ–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω)")
                return 'lead'
            
            # –ì–∞—Ä–º–æ–Ω–∏—è: —Å—Ä–µ–¥–Ω–∏–µ –Ω–æ—Ç—ã, –º–Ω–æ–≥–æ –ø–∏—Ç—á–µ–π
            elif 50 <= avg_pitch <= 70 and unique_pitches > 5:
                print(f"    -> –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ HARMONY (—Å—Ä–µ–¥–Ω–∏–µ –Ω–æ—Ç—ã + –º–Ω–æ–≥–æ –ø–∏—Ç—á–µ–π)")
                return 'harmony'
    
    print(f"    -> –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø, –æ—Å—Ç–∞–µ—Ç—Å—è UNKNOWN")
    return 'unknown'

def analyze_track_devices(track):
    """–ê–Ω–∞–ª–∏–∑ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–∞ —Ç—Ä–µ–∫–µ"""
    devices = []
    
    # –ù–∞–π—Ç–∏ –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    device_chain = track.find('.//DeviceChain')
    if device_chain is None:
        return devices
    
    for device in device_chain.findall('.//AudioEffectGroupDevice'):
        device_info = {
            'type': 'EffectRack',
            'name': get_device_name(device),
            'parameters': get_device_parameters(device)
        }
        devices.append(device_info)
    
    for device in device_chain.findall('.//PluginDevice'):
        device_info = {
            'type': 'Plugin',
            'name': get_device_name(device),
            'plugin_desc': get_plugin_info(device),
            'parameters': get_device_parameters(device)
        }
        devices.append(device_info)
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ Ableton
    device_types = [
        'Operator', 'Simpler', 'Impulse', 'Bass', 'Collision',
        'AutoFilter', 'EqEight', 'Compressor2', 'Reverb', 'Delay'
    ]
    
    for device_type in device_types:
        for device in device_chain.findall(f'.//{device_type}'):
            device_info = {
                'type': device_type,
                'name': device_type,
                'parameters': get_device_parameters(device)
            }
            devices.append(device_info)
    
    return devices

def get_device_name(device):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    name_elem = device.find('.//UserName')
    if name_elem is not None:
        return name_elem.get('Value', 'Unnamed Device')
    return 'Unnamed Device'

def get_plugin_info(device):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–≥–∏–Ω–µ"""
    plugin_desc = device.find('.//PluginDesc')
    if plugin_desc is not None:
        vst_info = plugin_desc.find('.//VstPluginInfo')
        if vst_info is not None:
            plugin_name = vst_info.find('.//PluginName')
            if plugin_name is not None:
                return plugin_name.get('Value', 'Unknown Plugin')
    return 'Unknown Plugin'

def get_device_parameters(device):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    parameters = {}
    
    # –ù–∞–π—Ç–∏ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    for param in device.findall('.//FloatEvent'):
        param_id = param.get('Id', '')
        param_value = param.get('Value', '')
        if param_id and param_value:
            parameters[f"param_{param_id}"] = float(param_value)
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    for param in device.findall('.//BoolEvent'):
        param_id = param.get('Id', '')
        param_value = param.get('Value', '')
        if param_id and param_value:
            parameters[f"bool_{param_id}"] = param_value.lower() == 'true'
    
    return parameters

def analyze_track_clips(track):
    """–ê–Ω–∞–ª–∏–∑ –∫–ª–∏–ø–æ–≤ —Ç—Ä–µ–∫–∞"""
    clips = []
    
    midi_clips = track.findall('.//MidiClip')
    for clip in midi_clips:
        clip_info = analyze_midi_clip_detailed(clip)
        if clip_info:
            clips.append(clip_info)
    
    return clips

def analyze_midi_clip_detailed(clip):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ MIDI –∫–ª–∏–ø–∞"""
    name_elem = clip.find('.//Name')
    clip_name = name_elem.get('Value') if name_elem is not None else "Unnamed"
    
    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    current_start = float(clip.find('./CurrentStart').get('Value', 0))
    current_end = float(clip.find('./CurrentEnd').get('Value', 0))
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–æ—Ç
    notes_data = extract_clip_notes(clip)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–æ—Ç–∞–º
    note_stats = calculate_note_statistics(notes_data)
    
    clip_info = {
        'name': clip_name,
        'start': current_start,
        'end': current_end,
        'duration': current_end - current_start,
        'notes_count': len(notes_data),
        'note_statistics': note_stats,
        'notes': notes_data
    }
    
    return clip_info

def extract_clip_notes(clip):
    """–ò–∑–≤–ª–µ—á—å –Ω–æ—Ç—ã –∏–∑ –∫–ª–∏–ø–∞"""
    notes = []
    
    key_tracks_section = clip.find('.//KeyTracks')
    if key_tracks_section is None:
        return notes
    
    for key_track in key_tracks_section.findall('./KeyTrack'):
        midi_key_elem = key_track.find('./MidiKey')
        if midi_key_elem is None:
            continue
            
        midi_pitch = int(midi_key_elem.get('Value'))
        
        track_notes_section = key_track.find('./Notes')
        if track_notes_section is None:
            continue
        
        for note_event in track_notes_section.findall('./MidiNoteEvent'):
            attrs = note_event.attrib
            
            note_data = {
                'time': float(attrs.get('Time', 0)),
                'duration': float(attrs.get('Duration', 0)),
                'pitch': midi_pitch,
                'velocity': int(attrs.get('Velocity', 64)),
                'enabled': attrs.get('IsEnabled', 'true').lower() == 'true'
            }
            notes.append(note_data)
    
    return notes

def calculate_note_statistics(notes):
    """–í—ã—á–∏—Å–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–æ—Ç–∞–º"""
    if not notes:
        return {}
    
    enabled_notes = [n for n in notes if n['enabled']]
    
    if not enabled_notes:
        return {'enabled_notes': 0}
    
    pitches = [n['pitch'] for n in enabled_notes]
    velocities = [n['velocity'] for n in enabled_notes]
    durations = [n['duration'] for n in enabled_notes]
    
    stats = {
        'enabled_notes': len(enabled_notes),
        'disabled_notes': len(notes) - len(enabled_notes),
        'pitch_range': {
            'min': min(pitches),
            'max': max(pitches),
            'unique_count': len(set(pitches))
        },
        'velocity_range': {
            'min': min(velocities),
            'max': max(velocities),
            'avg': sum(velocities) / len(velocities)
        },
        'duration_range': {
            'min': min(durations),
            'max': max(durations),
            'avg': sum(durations) / len(durations)
        },
        'note_density': len(enabled_notes) / (max([n['time'] + n['duration'] for n in enabled_notes]) if enabled_notes else 1)
    }
    
    return stats

def analyze_track_mixer(track):
    """–ê–Ω–∞–ª–∏–∑ –º–∏–∫—à–µ—Ä–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç—Ä–µ–∫–∞"""
    mixer_data = {}
    
    # –ì—Ä–æ–º–∫–æ—Å—Ç—å
    volume_elem = track.find('.//Volume')
    if volume_elem is not None:
        manual_elem = volume_elem.find('./Manual')
        if manual_elem is not None:
            mixer_data['volume'] = float(manual_elem.get('Value', 0.85))
    
    # –ü–∞–Ω–æ—Ä–∞–º–∞
    pan_elem = track.find('.//Pan')
    if pan_elem is not None:
        manual_elem = pan_elem.find('./Manual')
        if manual_elem is not None:
            mixer_data['pan'] = float(manual_elem.get('Value', 0))
    
    # Sends (–ø–æ—Å—ã–ª—ã –Ω–∞ —à–∏–Ω—ã)
    sends = []
    sends_section = track.find('.//Sends')
    if sends_section is not None:
        for send in sends_section.findall('./TrackSendHolder'):
            send_info = {
                'active': send.find('./Send/Active').get('Value', 'false').lower() == 'true' if send.find('./Send/Active') is not None else False,
                'value': float(send.find('./Send/Manual').get('Value', 0)) if send.find('./Send/Manual') is not None else 0
            }
            sends.append(send_info)
    
    mixer_data['sends'] = sends
    
    return mixer_data

def analyze_track_automation(track):
    """–ê–Ω–∞–ª–∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç—Ä–µ–∫–∞"""
    automation_data = []
    
    # –ù–∞–π—Ç–∏ –≤—Å–µ –æ–≥–∏–±–∞—é—â–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
    for envelope in track.findall('.//ClipEnvelope'):
        envelope_info = analyze_envelope(envelope)
        if envelope_info:
            automation_data.append(envelope_info)
    
    return automation_data

def analyze_envelope(envelope):
    """–ê–Ω–∞–ª–∏–∑ –æ–≥–∏–±–∞—é—â–µ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
    target_elem = envelope.find('.//EnvelopeTarget')
    if target_elem is None:
        return None
    
    # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
    device_id = target_elem.find('./Id').get('Value') if target_elem.find('./Id') is not None else None
    
    # –ü–æ–ª—É—á–∏—Ç—å —Ç–æ—á–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
    automation_events = envelope.findall('.//FloatEvent')
    
    if not automation_events:
        return None
    
    points = []
    for event in automation_events:
        point = {
            'time': float(event.get('Time', 0)),
            'value': float(event.get('Value', 0))
        }
        points.append(point)
    
    envelope_info = {
        'device_id': device_id,
        'points_count': len(points),
        'points': points[:10]  # –ü–µ—Ä–≤—ã–µ 10 —Ç–æ—á–µ–∫ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    }
    
    return envelope_info

def analyze_audio_clip(clip):
    """–ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ –∫–ª–∏–ø–∞"""
    name_elem = clip.find('.//Name')
    clip_name = name_elem.get('Value') if name_elem is not None else "Unnamed"
    
    current_start = float(clip.find('./CurrentStart').get('Value', 0))
    current_end = float(clip.find('./CurrentEnd').get('Value', 0))
    
    clip_info = {
        'name': clip_name,
        'type': 'Audio',
        'start': current_start,
        'end': current_end,
        'duration': current_end - current_start
    }
    
    return clip_info

def analyze_by_track_types(tracks_data):
    """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–∫–æ–≤ –ø–æ –∏—Ö —Ç–∏–ø–∞–º —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ–¥—Ö–æ–¥–∞–º–∏"""
    
    print(f"\nüéØ –ê–ù–ê–õ–ò–ó –ü–û –¢–ò–ü–ê–ú –¢–†–ï–ö–û–í:")
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º
    tracks_by_type = defaultdict(list)
    for track in tracks_data:
        tracks_by_type[track['track_type']].append(track)
    
    for track_type, tracks in tracks_by_type.items():
        print(f"\nüìä {track_type.upper()} –¢–†–ï–ö–ò ({len(tracks)} —à—Ç.):")
        
        if track_type == 'bass':
            analyze_bass_tracks(tracks)
        elif track_type == 'drums':
            analyze_drum_tracks(tracks)
        elif track_type == 'lead':
            analyze_lead_tracks(tracks)
        elif track_type == 'harmony':
            analyze_harmony_tracks(tracks)
        elif track_type == 'master':
            analyze_master_tracks(tracks)
        elif track_type == 'unknown':
            analyze_unknown_tracks(tracks)
        else:
            analyze_generic_tracks(tracks)

def analyze_unknown_tracks(tracks):
    """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–∫–æ–≤ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
    print("  ‚ùì –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–´–ï –¢–†–ï–ö–ò:")
    for track in tracks:
        print(f"    {track['name']}: {track['type']}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
        for clip in track['clips']:
            if clip['note_statistics']:
                stats = clip['note_statistics']
                print(f"      –ö–ª–∏–ø '{clip['name']}': {stats['enabled_notes']} –Ω–æ—Ç")
                if 'pitch_range' in stats:
                    pitches = f"{stats['pitch_range']['min']}-{stats['pitch_range']['max']}"
                    print(f"        –ü–∏—Ç—á–∏: {pitches} ({stats['pitch_range']['unique_count']} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö)")

def analyze_harmony_tracks(tracks):
    """–ê–Ω–∞–ª–∏–∑ –≥–∞—Ä–º–æ–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–∫–æ–≤"""
    print("  üéπ –ì–ê–†–ú–û–ù–ò–ß–ï–°–ö–ò–ï –¢–†–ï–ö–ò:")
    for track in tracks:
        print(f"    {track['name']}: –∞–∫–∫–æ—Ä–¥—ã –∏ –≥–∞—Ä–º–æ–Ω–∏—è")
        
        for clip in track['clips']:
            if clip['note_statistics']:
                stats = clip['note_statistics']
                print(f"      –ö–ª–∏–ø '{clip['name']}':")
                print(f"        –ì–æ–ª–æ—Å–æ–≤–µ–¥–µ–Ω–∏–µ: {stats['pitch_range']['unique_count']} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ—Ç")
                
                # –ê–Ω–∞–ª–∏–∑ –∞–∫–∫–æ—Ä–¥–æ–≤ (–µ—Å–ª–∏ –º–Ω–æ–≥–æ –Ω–æ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)
                if stats['note_density'] > 2:
                    print(f"        üéº –ü–ª–æ—Ç–Ω–∞—è –≥–∞—Ä–º–æ–Ω–∏—è (–ø–ª–æ—Ç–Ω–æ—Å—Ç—å: {stats['note_density']:.1f})")
                elif stats['note_density'] < 0.5:
                    print(f"        üéµ –†–∞–∑—Ä–µ–∂–µ–Ω–Ω–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞ (–ø–ª–æ—Ç–Ω–æ—Å—Ç—å: {stats['note_density']:.1f})")

def analyze_bass_tracks(tracks):
    """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–∞—Å–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤"""
    print("  üé∏ –ë–ê–°-–°–ü–ï–¶–ò–§–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:")
    
    for track in tracks:
        print(f"\n    –¢—Ä–µ–∫: {track['name']}")
        
        # –ê–Ω–∞–ª–∏–∑ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–æ—Å–æ–±–µ–Ω–Ω–æ —Ñ–∏–ª—å—Ç—Ä—ã –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã)
        bass_devices = analyze_bass_devices(track['devices'])
        if bass_devices:
            print(f"      –ë–∞—Å–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {bass_devices}")
        
        # –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        for clip in track['clips']:
            if clip['note_statistics']:
                stats = clip['note_statistics']
                print(f"      –ö–ª–∏–ø '{clip['name']}':")
                print(f"        –ü–∏—Ç—á-–¥–∏–∞–ø–∞–∑–æ–Ω: {stats['pitch_range']['min']}-{stats['pitch_range']['max']} MIDI")
                print(f"        –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ—Ç: {stats['pitch_range']['unique_count']}")
                
                # –ë–∞—Å–æ–≤–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, –Ω–µ —Ç–æ–ª—å–∫–æ –æ—Ç velocity
                if 'velocity_range' in stats:
                    print(f"        Velocity: {stats['velocity_range']['min']}-{stats['velocity_range']['max']} (avg: {stats['velocity_range']['avg']:.1f})")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É–±-–±–∞—Å—ã
                if stats['pitch_range']['min'] < 40:
                    print(f"        üîä –°–æ–¥–µ—Ä–∂–∏—Ç —Å—É–±-–±–∞—Å—ã (MIDI < 40)")
        
        # –ê–Ω–∞–ª–∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ (–≤–∞–∂–Ω–æ –¥–ª—è –±–∞—Å–∞)
        if track['automation']:
            print(f"      –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è: {len(track['automation'])} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            for auto in track['automation'][:3]:  # –ü–µ—Ä–≤—ã–µ 3
                print(f"        - {auto['points_count']} —Ç–æ—á–µ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")

def analyze_drum_tracks(tracks):
    """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–∞—Ä–∞–±–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤"""
    print("  ü•Å –ë–ê–†–ê–ë–ê–ù-–°–ü–ï–¶–ò–§–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:")
    
    for track in tracks:
        print(f"\n    –¢—Ä–µ–∫: {track['name']}")
        
        # –ê–Ω–∞–ª–∏–∑ –±–∞—Ä–∞–±–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã
        drum_map = analyze_drum_mapping(track)
        if drum_map:
            print(f"      –ë–∞—Ä–∞–±–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞:")
            for pitch, info in drum_map.items():
                drum_name = get_drum_name(pitch)
                print(f"        {drum_name} (MIDI {pitch}): {info['hits']} —É–¥–∞—Ä–æ–≤, vel {info['vel_range']}")
        
        # –ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏ (–¥–ª—è –±–∞—Ä–∞–±–∞–Ω–æ–≤ velocity –æ—á–µ–Ω—å –≤–∞–∂–Ω–∞)
        for clip in track['clips']:
            if clip['note_statistics'] and 'velocity_range' in clip['note_statistics']:
                vel_stats = clip['note_statistics']['velocity_range']
                print(f"      –ö–ª–∏–ø '{clip['name']}':")
                print(f"        –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω: {vel_stats['min']}-{vel_stats['max']}")
                
                # –ê–Ω–∞–ª–∏–∑ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                vel_range = vel_stats['max'] - vel_stats['min']
                if vel_range > 50:
                    print(f"        üé≠ –í—ã—Å–æ–∫–∞—è –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–¥–∏–∞–ø–∞–∑–æ–Ω {vel_range})")
                elif vel_range < 20:
                    print(f"        üîÑ –ú–æ–Ω–æ—Ç–æ–Ω–Ω–∞—è –∏–≥—Ä–∞ (–¥–∏–∞–ø–∞–∑–æ–Ω {vel_range})")

def analyze_drum_mapping(track):
    """–ê–Ω–∞–ª–∏–∑ –±–∞—Ä–∞–±–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    drum_map = {}
    
    for clip in track['clips']:
        for note in clip.get('notes', []):
            if not note['enabled']:
                continue
                
            pitch = note['pitch']
            if pitch not in drum_map:
                drum_map[pitch] = {
                    'hits': 0,
                    'velocities': []
                }
            
            drum_map[pitch]['hits'] += 1
            drum_map[pitch]['velocities'].append(note['velocity'])
    
    # –í—ã—á–∏—Å–ª–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω—ã velocity –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    for pitch in drum_map:
        velocities = drum_map[pitch]['velocities']
        drum_map[pitch]['vel_range'] = f"{min(velocities)}-{max(velocities)}"
    
    return drum_map

def get_drum_name(midi_pitch):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞—Ä–∞–±–∞–Ω–∞ –ø–æ MIDI –Ω–æ—Ç–µ"""
    drum_names = {
        35: "Kick (Acoustic)",
        36: "Kick (Electric)",
        37: "Side Stick",
        38: "Snare (Acoustic)",
        39: "Hand Clap",
        40: "Snare (Electric)",
        41: "Low Floor Tom",
        42: "Closed Hi-hat",
        43: "High Floor Tom",
        44: "Pedal Hi-hat",
        45: "Low Tom",
        46: "Open Hi-hat",
        47: "Low-Mid Tom",
        48: "Hi-Mid Tom",
        49: "Crash Cymbal 1",
        50: "High Tom",
        51: "Ride Cymbal 1",
        52: "Chinese Cymbal",
        53: "Ride Bell",
        54: "Tambourine",
        55: "Splash Cymbal",
        56: "Cowbell",
        57: "Crash Cymbal 2",
        58: "Vibra Slap",
        59: "Ride Cymbal 2"
    }
    
    return drum_names.get(midi_pitch, f"Drum {midi_pitch}")

def analyze_bass_devices(devices):
    """–ê–Ω–∞–ª–∏–∑ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–ª—è –±–∞—Å–∞"""
    bass_specific = []
    
    for device in devices:
        device_name = device['name'].lower()
        device_type = device['type'].lower()
        
        # –ë–∞—Å–æ–≤—ã–µ —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä—ã –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã
        if any(word in device_name for word in ['bass', 'sub', 'operator', 'collision']):
            bass_specific.append(f"{device['type']}: {device['name']}")
        elif any(word in device_type for word in ['autofilter', 'eq', 'compressor']):
            bass_specific.append(f"{device['type']} (–±–∞—Å–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)")
    
    return bass_specific

def analyze_lead_tracks(tracks):
    """–ê–Ω–∞–ª–∏–∑ –≤–µ–¥—É—â–∏—Ö —Ç—Ä–µ–∫–æ–≤"""
    print("  üé∫ –õ–ò–î–ï–†-–¢–†–ï–ö–ò:")
    for track in tracks:
        print(f"    {track['name']}: {len(track['clips'])} –∫–ª–∏–ø–æ–≤")

def analyze_master_tracks(tracks):
    """–ê–Ω–∞–ª–∏–∑ –º–∞—Å—Ç–µ—Ä-—Ç—Ä–µ–∫–æ–≤"""
    print("  üéöÔ∏è –ú–ê–°–¢–ï–†-–¢–†–ï–ö–ò:")
    for track in tracks:
        print(f"    {track['name']}: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–≤–µ–¥–µ–Ω–∏–µ")
        if track['devices']:
            print(f"      –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –º–∞—Å—Ç–µ—Ä–∏–Ω–≥–∞: {len(track['devices'])}")

def analyze_generic_tracks(tracks):
    """–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤"""
    print("  ‚ùì –ü–†–û–ß–ò–ï –¢–†–ï–ö–ò:")
    for track in tracks:
        print(f"    {track['name']}: {track['type']}")

def save_track_analysis(tracks_data):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"""
    
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å JSON —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    with open('track_analysis.json', 'w', encoding='utf-8') as f:
        json.dump(tracks_data, f, ensure_ascii=False, indent=2)
    
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å CSV —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    with open('tracks_summary.csv', 'w', newline='', encoding='utf-8') as f:
        fieldnames = [
            'track_name', 'track_type', 'clips_count', 'devices_count', 
            'automation_count', 'volume', 'pan'
        ]
        writer = csv.DictWriter(f, fieldnames=fieldnames)
        writer.writeheader()
        
        for track in tracks_data:
            writer.writerow({
                'track_name': track['name'],
                'track_type': track['track_type'],
                'clips_count': len(track['clips']),
                'devices_count': len(track['devices']),
                'automation_count': len(track['automation']),
                'volume': track.get('volume'),
                'pan': track.get('pan')
            })
    
    print(f"\nüíæ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:")
    print(f"   - track_analysis.json (–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)")
    print(f"   - tracks_summary.csv (—Å–≤–æ–¥–∫–∞)")

if __name__ == "__main__":
    tracks = analyze_project_by_track_types()
    print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(tracks)} —Ç—Ä–µ–∫–æ–≤.")